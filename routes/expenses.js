const express = require('express');
const router = express.Router();
const multer = require('multer');
const path = require('path');
require('dotenv').config();
const { verifyToken } = require('../middleware/auth');
const { v4: uuidv4 } = require('uuid');
const { supabase, getAdminClient } = require('../config/supabase');

// C·∫•u h√¨nh multer ƒë·ªÉ l∆∞u file v√†o memory
const storage = multer.memoryStorage();

// Ki·ªÉm tra file upload
const fileFilter = (req, file, cb) => {
  // Ch·ªâ ch·∫•p nh·∫≠n file ·∫£nh
  if (file.mimetype.startsWith('image/')) {
    cb(null, true);
  } else {
    cb(new Error('Ch·ªâ ch·∫•p nh·∫≠n file ·∫£nh'), false);
  }
};

// C·∫•u h√¨nh multer
const upload = multer({
  storage: storage,
  fileFilter: fileFilter,
  limits: {
    fileSize: 5 * 1024 * 1024, // 5MB
    files: 5 // T·ªëi ƒëa 5 file
  }
});

// GET /api/expenses - L·∫•y danh s√°ch chi ph√≠
router.get('/', verifyToken, async (req, res) => {
  try {
    console.log('API: L·∫•y danh s√°ch chi ph√≠ cho user:', req.user.id);
    
    // L·∫•y tham s·ªë truy v·∫•n
    const page = parseInt(req.query.page) || 1;
    const limit = parseInt(req.query.limit) || 20;
    const offset = (page - 1) * limit;
    
    // L·∫•y d·ªØ li·ªáu t·ª´ database
    const { data: expenses, error } = await supabase
      .from('child_expenses')
      .select('*')
      .eq('user_id', req.user.id)
      .order('created_at', { ascending: false })
      .range(offset, offset + limit - 1);
    
    if (error) {
      console.error('L·ªói l·∫•y danh s√°ch chi ph√≠:', error);
      return res.status(500).json({ success: false, error: 'L·ªói khi l·∫•y danh s√°ch chi ph√≠' });
    }
    
    console.log(`ƒê√£ t√¨m th·∫•y ${expenses?.length || 0} chi ph√≠`);

    // ƒê·∫£m b·∫£o ƒë·ªãnh d·∫°ng images ƒë√∫ng tr∆∞·ªõc khi tr·∫£ v·ªÅ
    const processedExpenses = expenses.map(expense => {
      // Tr∆∞·ªùng h·ª£p images l√† chu·ªói JSON
      if (expense.images && typeof expense.images === 'string') {
        try {
          expense.images = JSON.parse(expense.images);
        } catch (e) {
          console.error('L·ªói parse JSON cho images:', e);
          expense.images = [];
        }
      }
      
      // ƒê·∫£m b·∫£o images lu√¥n l√† m·∫£ng
      if (!expense.images) {
        expense.images = [];
      } else if (!Array.isArray(expense.images)) {
        expense.images = [expense.images];
      }
      
      return expense;
    });
    
    // Tr·∫£ v·ªÅ d·ªØ li·ªáu
    res.json({ 
      success: true, 
      expenses: processedExpenses,
      pagination: {
        page,
        limit,
        total: processedExpenses.length 
      }
    });
    
  } catch (error) {
    console.error('L·ªói l·∫•y danh s√°ch chi ph√≠:', error);
    res.status(500).json({ success: false, error: 'L·ªói m√°y ch·ªß n·ªôi b·ªô' });
  }
});

// API th√™m chi ph√≠ m·ªõi (JSON)
router.post('/', verifyToken, async (req, res) => {
  try {
    console.log('\n=== POST /api/expenses (JSON) ===');
    console.log('Content-Type:', req.headers['content-type']);
    console.log('Th√¥ng tin user:', req.user ? `${req.user.id} (${req.user.email})` : 'Kh√¥ng c√≥');
    console.log('Body:', req.body);
    
    // Ki·ªÉm tra th√¥ng tin user
    if (!req.user || !req.user.id) {
      console.log('‚ùå Kh√¥ng c√≥ th√¥ng tin user');
      return res.status(401).json({
        success: false,
        message: 'Kh√¥ng c√≥ th√¥ng tin ng∆∞·ªùi d√πng, vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i'
      });
    }

    // Validate d·ªØ li·ªáu ƒë·∫ßu v√†o
    const requiredFields = ['noi_dung', 'gia_tien', 'danh_muc'];
    const missingFields = requiredFields.filter(field => !req.body[field]);
    
    if (missingFields.length > 0) {
      console.log('‚ùå Thi·∫øu c√°c tr∆∞·ªùng:', missingFields);
      return res.status(400).json({
        success: false, 
        message: `Thi·∫øu th√¥ng tin b·∫Øt bu·ªôc: ${missingFields.join(', ')}`,
        received: req.body
      });
    }

    // Ki·ªÉm tra v√† x·ª≠ l√Ω gi√° ti·ªÅn
    let gia_tien = 0;
    try {
      // ƒê·∫£m b·∫£o gia_tien l√† chu·ªói tr∆∞·ªõc khi x·ª≠ l√Ω
      const gia_tien_str = String(req.body.gia_tien).trim();
      console.log('Gi√° ti·ªÅn g·ªëc:', gia_tien_str);
      
      // X·ª≠ l√Ω chu·ªói, lo·∫°i b·ªè d·∫•u ph·∫©y ho·∫∑c ch·∫•m ph√¢n c√°ch h√†ng ngh√¨n
      const formatted_gia_tien = gia_tien_str.replace(/[.,\s]/g, '');
      console.log('Gi√° ti·ªÅn sau khi ƒë·ªãnh d·∫°ng:', formatted_gia_tien);
      
      gia_tien = parseFloat(formatted_gia_tien);
      console.log('Gi√° ti·ªÅn sau khi chuy·ªÉn ƒë·ªïi:', gia_tien);
    } catch (e) {
      console.error('‚ùå L·ªói chuy·ªÉn ƒë·ªïi gi√° ti·ªÅn:', e);
    }
    
    if (isNaN(gia_tien) || gia_tien <= 0) {
      console.log('‚ùå Gi√° ti·ªÅn kh√¥ng h·ª£p l·ªá:', req.body.gia_tien);
      return res.status(400).json({
        success: false,
        message: 'Gi√° ti·ªÅn ph·∫£i l√† s·ªë d∆∞∆°ng'
      });
    }

    // X·ª≠ l√Ω d·ªØ li·ªáu images n·∫øu ƒë∆∞·ª£c cung c·∫•p
    let images = [];
    if (req.body.images) {
      if (Array.isArray(req.body.images)) {
        images = req.body.images;
      } else if (typeof req.body.images === 'string') {
        try {
          const parsedImages = JSON.parse(req.body.images);
          images = Array.isArray(parsedImages) ? parsedImages : [parsedImages];
        } catch (e) {
          // N·∫øu kh√¥ng ph·∫£i l√† JSON, c√≥ th·ªÉ l√† URL ƒë∆°n
          if (req.body.images.startsWith('http')) {
            images = [req.body.images];
          }
        }
      }
      console.log('Images ƒë∆∞·ª£c x·ª≠ l√Ω:', images);
    }

    // Chu·∫©n b·ªã d·ªØ li·ªáu cho b·∫£ng child_expenses
    const expenseData = {
      user_id: req.user.id,
      noi_dung: req.body.noi_dung.trim(),
      gia_tien: gia_tien,
      danh_muc: req.body.danh_muc,
      dia_diem: (req.body.dia_diem || '').trim(),
      ngay_thang: req.body.ngay_thang || new Date().toISOString(),
      ghi_chu: (req.body.ghi_chu || '').trim(),
      trang_thai: req.body.trang_thai || 'Ch∆∞a thanh to√°n',
      images: images.length > 0 ? images : [],
      created_at: new Date().toISOString()
    };

    console.log('üìù D·ªØ li·ªáu chi ph√≠ chu·∫©n b·ªã g·ª≠i:', JSON.stringify(expenseData, null, 2));

    // Th·ª≠ xem l·ªói RLS l√† g√¨ b·∫±ng c√°ch ki·ªÉm tra quy·ªÅn
    console.log('üîç Ki·ªÉm tra quy·ªÅn h·∫°n c·ªßa user tr√™n b·∫£ng child_expenses');
    
    // L·∫•y admin client ƒë·ªÉ bypass RLS
    const adminSupabase = getAdminClient();
    if (!adminSupabase) {
      console.error('‚ùå Kh√¥ng th·ªÉ l·∫•y admin client');
      return res.status(500).json({
        success: false,
        message: 'L·ªói c·∫•u h√¨nh server'
      });
    }
    
    console.log('‚úÖ ƒê√£ l·∫•y admin client ƒë·ªÉ bypass RLS');
    
    // Th√™m d·ªØ li·ªáu
    const { data: expense, error: expenseError } = await adminSupabase
      .from('child_expenses')
      .insert(expenseData)
      .select()
      .single();

    if (expenseError) {
      console.error('‚ùå L·ªói th√™m chi ph√≠:', expenseError);
      return res.status(500).json({
        success: false,
        message: 'Kh√¥ng th·ªÉ th√™m chi ph√≠',
        error: expenseError.message,
        details: expenseError
      });
    }

    console.log('‚úÖ ƒê√£ th√™m chi ph√≠:', expense.id);

    // Tr·∫£ v·ªÅ k·∫øt qu·∫£ th√†nh c√¥ng
    return res.status(201).json({
      success: true,
      message: 'Th√™m chi ph√≠ th√†nh c√¥ng',
      expense: expense
    });
  } catch (error) {
    console.error('‚ùå L·ªói server:', error);
    return res.status(500).json({
      success: false,
      message: 'L·ªói server, vui l√≤ng th·ª≠ l·∫°i sau',
      error: error.message
    });
  }
});

// API ƒë·ªÉ upload h√¨nh ·∫£nh cho chi ph√≠
router.post('/upload-images', verifyToken, upload.array('images', 5), async (req, res) => {
  try {
    // Hi·ªÉn th·ªã th√¥ng tin ƒë·ªÉ debug
    console.log('\n=== POST /api/expenses/upload-images ===');
    console.log('Content-Type:', req.headers['content-type']);
    console.log('Authorization:', req.headers.authorization ? 'Bearer: ' + req.headers.authorization.substring(0, 20) + '...' : 'Kh√¥ng c√≥');
    console.log('Cookies:', req.cookies?.sb_token ? 'sb_token: ' + req.cookies.sb_token.substring(0, 20) + '...' : 'Kh√¥ng c√≥ cookie sb_token');
    console.log('Th√¥ng tin user:', req.user ? `${req.user.id} (${req.user.email})` : 'Kh√¥ng c√≥');
    console.log('Body:', req.body);
    console.log('req.body.expense_id:', req.body.expense_id);
    console.log('Files:', req.files?.length || 0);
    
    // In gi√° tr·ªã tr·ª±c ti·∫øp ƒë·ªÉ debug
    if (req.files && req.files.length > 0) {
      req.files.forEach((file, index) => {
        console.log(`File ${index + 1}:`, {
          fieldname: file.fieldname,
          originalname: file.originalname,
          mimetype: file.mimetype,
          size: file.size,
          buffer: file.buffer ? 'C√≥ buffer d·ªØ li·ªáu' : 'Kh√¥ng c√≥ buffer'
        });
      });
    } else {
      console.log('‚ùå KH√îNG NH·∫¨N ƒê∆Ø·ª¢C FILE');
    }
  
    // Ki·ªÉm tra th√¥ng tin user
    if (!req.user || !req.user.id) {
      console.log('‚ùå Kh√¥ng c√≥ th√¥ng tin user');
      return res.status(401).json({
        success: false,
        message: 'Kh√¥ng c√≥ th√¥ng tin ng∆∞·ªùi d√πng, vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i'
      });
    }
    
    // Ki·ªÉm tra ID chi ph√≠
    const expenseId = req.body.expense_id;
    if (!expenseId) {
      console.log('‚ùå Thi·∫øu ID chi ph√≠');
      return res.status(400).json({
        success: false,
        message: 'Thi·∫øu ID chi ph√≠'
      });
    }
    
    // T·∫°o supabase admin client v·ªõi service role ƒë·ªÉ bypass RLS
    const adminSupabase = getAdminClient();
    if (!adminSupabase) {
      console.error('‚ùå Kh√¥ng th·ªÉ l·∫•y admin client');
      return res.status(500).json({
        success: false,
        message: 'L·ªói c·∫•u h√¨nh server'
      });
    }
    
    console.log('‚úÖ ƒê√£ l·∫•y admin client ƒë·ªÉ bypass RLS');
    
    // Ki·ªÉm tra chi ph√≠ t·ªìn t·∫°i v√† thu·ªôc v·ªÅ user
    const { data: expense, error: expenseError } = await adminSupabase
      .from('child_expenses')
      .select('id')
      .eq('id', expenseId)
      .eq('user_id', req.user.id)
      .single();
      
    if (expenseError || !expense) {
      console.log('‚ùå Chi ph√≠ kh√¥ng t·ªìn t·∫°i ho·∫∑c kh√¥ng thu·ªôc v·ªÅ user n√†y');
      return res.status(404).json({
        success: false,
        message: 'Chi ph√≠ kh√¥ng t·ªìn t·∫°i ho·∫∑c kh√¥ng thu·ªôc v·ªÅ b·∫°n'
      });
    }
    
    // Ki·ªÉm tra files
    if (!req.files || req.files.length === 0) {
      console.log('‚ùå Kh√¥ng c√≥ file n√†o ƒë∆∞·ª£c g·ª≠i l√™n');
      return res.status(400).json({
        success: false,
        message: 'Kh√¥ng c√≥ file n√†o ƒë∆∞·ª£c g·ª≠i l√™n'
      });
    }
    
    console.log(`üìÅ S·ªë file nh·∫≠n ƒë∆∞·ª£c: ${req.files.length}`);
    console.log('üìÅ Th√¥ng tin files:', req.files.map(f => ({
      originalname: f.originalname,
      mimetype: f.mimetype,
      size: f.size,
      fieldname: f.fieldname
    })));
    
    // X·ª≠ l√Ω t·∫£i ·∫£nh l√™n
    const imageUrls = [];
    for (const file of req.files) {
      const fileName = `${uuidv4()}_${file.originalname.replace(/\s+/g, '_')}`;
      const filePath = `public/${req.user.id}/${fileName}`;
      
      console.log(`üì§ ƒêang t·∫£i l√™n ${fileName}, k√≠ch th∆∞·ªõc: ${file.size} bytes`);
      
      // T·∫£i l√™n Supabase Storage
      const { data: uploadData, error: uploadError } = await adminSupabase.storage
        .from('expenses')
        .upload(filePath, file.buffer, {
          contentType: file.mimetype,
          cacheControl: '3600'
        });

      if (uploadError) {
        console.error('‚ùå L·ªói t·∫£i ·∫£nh l√™n:', uploadError);
        continue; // Ti·∫øp t·ª•c v·ªõi ·∫£nh ti·∫øp theo n·∫øu c√≥ l·ªói
      }
      
      console.log('‚úÖ Upload th√†nh c√¥ng:', uploadData);
      
      // L·∫•y URL public
      const { data: urlData } = adminSupabase.storage
        .from('expenses')
        .getPublicUrl(filePath);

      if (urlData && urlData.publicUrl) {
        imageUrls.push(urlData.publicUrl);
        console.log('‚úÖ ƒê√£ t·∫£i l√™n ·∫£nh:', urlData.publicUrl);
        
        // L∆∞u th√¥ng tin ·∫£nh v√†o b·∫£ng expense_images
        const { error: imageError } = await adminSupabase
          .from('expense_images')
          .insert({
            expense_id: expenseId,
            image_url: urlData.publicUrl,
            file_name: fileName,
            file_path: filePath,
            created_at: new Date().toISOString()
          });

        if (imageError) {
          console.error('‚ùå L·ªói l∆∞u th√¥ng tin ·∫£nh:', imageError);
        }
      }
    }
    
    // C·∫≠p nh·∫≠t tr∆∞·ªùng images trong b·∫£ng child_expenses
    if (imageUrls.length > 0) {
      console.log('üìù C·∫≠p nh·∫≠t tr∆∞·ªùng images trong b·∫£ng child_expenses');
      
      // ƒê·∫ßu ti√™n l·∫•y d·ªØ li·ªáu images hi·ªán t·∫°i (n·∫øu c√≥)
      const { data: currentExpense, error: getError } = await adminSupabase
        .from('child_expenses')
        .select('images')
        .eq('id', expenseId)
        .single();
      
      let existingImages = [];
      if (!getError && currentExpense) {
        try {
          // X·ª≠ l√Ω tr∆∞·ªùng h·ª£p images l√† chu·ªói JSON
          if (currentExpense.images && typeof currentExpense.images === 'string') {
            existingImages = JSON.parse(currentExpense.images);
          } 
          // Tr∆∞·ªùng h·ª£p ƒë√£ l√† m·∫£ng
          else if (Array.isArray(currentExpense.images)) {
            existingImages = currentExpense.images;
          }
          // Tr∆∞·ªùng h·ª£p l√† gi√° tr·ªã ƒë∆°n
          else if (currentExpense.images) {
            existingImages = [currentExpense.images];
          }
        } catch (e) {
          console.error('‚ùå L·ªói parse JSON images hi·ªán t·∫°i:', e);
          existingImages = [];
        }
      }
      
      // K·∫øt h·ª£p ·∫£nh hi·ªán t·∫°i v·ªõi ·∫£nh m·ªõi
      const allImages = [...existingImages, ...imageUrls];
      console.log('üìù T·ªïng s·ªë ·∫£nh sau khi k·∫øt h·ª£p:', allImages.length);
      
      // C·∫≠p nh·∫≠t v√†o database
      const { error: updateError } = await adminSupabase
        .from('child_expenses')
        .update({ 
          images: allImages,
          updated_at: new Date().toISOString()
        })
        .eq('id', expenseId);
      
      if (updateError) {
        console.error('‚ùå L·ªói c·∫≠p nh·∫≠t tr∆∞·ªùng images:', updateError);
      } else {
        console.log('‚úÖ ƒê√£ c·∫≠p nh·∫≠t tr∆∞·ªùng images th√†nh c√¥ng');
      }
    }
    
    // Tr·∫£ v·ªÅ k·∫øt qu·∫£
    return res.status(200).json({
      success: true,
      message: `ƒê√£ t·∫£i l√™n ${imageUrls.length} h√¨nh ·∫£nh`,
      imageUrls: imageUrls
    });
    
  } catch (error) {
    console.error('‚ùå L·ªói x·ª≠ l√Ω upload ·∫£nh:', error);
    return res.status(500).json({
      success: false,
      message: 'L·ªói server, vui l√≤ng th·ª≠ l·∫°i sau',
      error: error.message
    });
  }
});

module.exports = router;