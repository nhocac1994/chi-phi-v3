/**
 * Reports Page JavaScript
 * X·ª≠ l√Ω hi·ªÉn th·ªã b√°o c√°o, bi·ªÉu ƒë·ªì, v√† t∆∞∆°ng t√°c ng∆∞·ªùi d√πng
 */

// Bi·∫øn global
// S·ª≠ d·ª•ng window.supabaseClient thay v√¨ khai b√°o l·∫°i
let currentReportType = 'time';
let currentTimeRange = 'year';
let currentCharts = {};
let currentComparisonType = 'month';
let currentPaymentStatus = 'all'; // Th√™m bi·∫øn global cho tr·∫°ng th√°i thanh to√°n
let userData = null;
let allExpenses = []; // Th√™m bi·∫øn global cho t·∫•t c·∫£ chi ph√≠
let filteredExpenses = []; // Th√™m bi·∫øn global cho chi ph√≠ ƒë√£ l·ªçc

// Th√™m bi·∫øn global cho ph√¢n trang
let currentPage = 1;
let itemsPerPage = 10;
let totalPages = 1;
let currentDetailData = [];

// Th√™m c√°c bi·∫øn c·∫•u h√¨nh
const CONFIG = {
  colors: {
    primary: '#6366f1',
    success: '#10b981',
    warning: '#f59e0b',
    danger: '#ef4444',
    info: '#3b82f6',
    error: '#dc2626'
  },
  categories: {
    'ƒÇn u·ªëng': { icon: 'bi-cup-hot', color: '#f59e0b' },
    'ƒêi l·∫°i': { icon: 'bi-car-front', color: '#3b82f6' },
    'Mua s·∫Øm': { icon: 'bi-bag', color: '#ec4899' },
    'Gi·∫£i tr√≠': { icon: 'bi-controller', color: '#8b5cf6' },
    'Y t·∫ø': { icon: 'bi-heart-pulse', color: '#ef4444' },
    'Nh√† c·ª≠a': { icon: 'bi-house', color: '#10b981' },
    'Gi√°o d·ª•c': { icon: 'bi-book', color: '#6366f1' },
    'H√≥a ƒë∆°n': { icon: 'bi-receipt', color: '#f97316' },
    'Kh√°c': { icon: 'bi-three-dots', color: '#94a3b8' }
  },
  chart: {
    animation: {
      duration: 800,
      easing: 'easeInOutQuart'
    },
    tooltip: {
      backgroundColor: 'rgba(0, 0, 0, 0.8)',
      titleFont: { size: 13 },
      bodyFont: { size: 12 },
      padding: 12
    }
  },
  dateRanges: {
    today: 'H√¥m nay',
    yesterday: 'H√¥m qua',
    thisWeek: '7 ng√†y qua',
    thisMonth: 'Th√°ng n√†y',
    lastMonth: 'Th√°ng tr∆∞·ªõc',
    thisQuarter: 'Qu√Ω n√†y',
    thisYear: 'NƒÉm nay',
    custom: 'T√πy ch·ªçn'
  }
};

// Th√™m h√†m ki·ªÉm tra v√† t·∫£i Chart.js
function detectChartJsLibrary() {
  return new Promise((resolve, reject) => {
    // Ki·ªÉm tra n·∫øu Chart.js ƒë√£ t·ªìn t·∫°i
    if (typeof Chart !== 'undefined') {
      console.log('Chart.js ƒë√£ ƒë∆∞·ª£c t·∫£i');
      resolve(Chart);
      return;
    }
    
    console.log('Chart.js ch∆∞a ƒë∆∞·ª£c t·∫£i, ƒëang th·ª≠ t·∫£i...');
    
    // Ki·ªÉm tra xem script ƒë√£ t·ªìn t·∫°i ch∆∞a
    let script = document.querySelector('script[src*="chart.js"]');
    if (!script) {
      // T·∫°o script element ƒë·ªÉ t·∫£i Chart.js t·ª´ CDN
      script = document.createElement('script');
      script.src = 'https://cdn.jsdelivr.net/npm/chart.js@3.9.1/dist/chart.min.js';
      script.async = true;
      
      script.onload = function() {
        console.log('ƒê√£ t·∫£i Chart.js th√†nh c√¥ng!');
        if (typeof Chart !== 'undefined') {
          resolve(Chart);
        } else {
          reject(new Error('ƒê√£ t·∫£i Chart.js nh∆∞ng kh√¥ng t√¨m th·∫•y ƒë·ªëi t∆∞·ª£ng Chart global'));
        }
      };
      
      script.onerror = function() {
        console.error('Kh√¥ng th·ªÉ t·∫£i Chart.js t·ª´ CDN');
        reject(new Error('Kh√¥ng th·ªÉ t·∫£i Chart.js'));
      };
      
      document.head.appendChild(script);
    } else {
      // Script ƒë√£ t·ªìn t·∫°i, ƒë·ª£i n√≥ load
      script.onload = function() {
        console.log('Chart.js ƒë√£ t·∫£i xong t·ª´ script hi·ªán c√≥');
        if (typeof Chart !== 'undefined') {
          resolve(Chart);
        } else {
          reject(new Error('Chart.js script t·ªìn t·∫°i nh∆∞ng kh√¥ng t√¨m th·∫•y ƒë·ªëi t∆∞·ª£ng Chart global'));
        }
      };
    }
  });
}

// Thi·∫øt l·∫≠p s·ª± ki·ªán khi trang ƒë√£ t·∫£i xong
document.addEventListener('DOMContentLoaded', async function() {
  console.log('üîÑ Trang b√°o c√°o ƒë√£ t·∫£i xong, chu·∫©n b·ªã kh·ªüi t·∫°o...');
  
  // T·∫°o loading overlay
  createLoadingOverlay();
  showLoading();
  
  try {
    // Ki·ªÉm tra v√† t·∫£i Chart.js n·∫øu c·∫ßn
    console.log('Ki·ªÉm tra th∆∞ vi·ªán Chart.js...');
    try {
      await detectChartJsLibrary();
      console.log('‚úÖ Chart.js ƒë√£ s·∫µn s√†ng');
    } catch (chartError) {
      console.error('‚ùå L·ªói khi t·∫£i Chart.js:', chartError);
      showError('Kh√¥ng th·ªÉ t·∫£i th∆∞ vi·ªán bi·ªÉu ƒë·ªì. Vui l√≤ng l√†m m·ªõi trang.');
    }
    
    // Kh·ªüi t·∫°o listeners v√† thi·∫øt l·∫≠p c√°c th√†nh ph·∫ßn
    setupEventListeners();
    setupSearchAndFilters();
    setupDateRangePicker();
    setupChartInteractions();
    
    // ƒê·∫£m b·∫£o Supabase ƒë∆∞·ª£c kh·ªüi t·∫°o
    initSupabaseClient();
    
    // Th√™m CSS ƒë·ªÉ c·∫£i thi·ªán hi·ªáu ·ª©ng loading
    addDynamicStyles();
    
    // Th√™m m·ªôt kho·∫£ng th·ªùi gian ng·∫Øn ƒë·ªÉ ƒë·∫£m b·∫£o c√°c th√†nh ph·∫ßn ƒë√£ t·∫£i xong
    setTimeout(() => {
      console.log('B·∫Øt ƒë·∫ßu ki·ªÉm tra x√°c th·ª±c sau khi trang ƒë√£ t·∫£i xong...');
      checkAuth();
    }, 500);
  } catch (error) {
    console.error('L·ªói khi kh·ªüi t·∫°o trang b√°o c√°o:', error);
    hideLoading();
    showError('Kh√¥ng th·ªÉ kh·ªüi t·∫°o trang b√°o c√°o. Vui l√≤ng t·∫£i l·∫°i trang.');
  }
});

// Th√™m CSS ƒë·ªông
function addDynamicStyles() {
  if (!document.getElementById('reports-loading-style')) {
    const style = document.createElement('style');
    style.id = 'reports-loading-style';
    style.textContent = `
      .reports-chart-wrapper.loading, .reports-table-container.loading {
        position: relative;
        min-height: 150px;
      }
      
      .reports-chart-wrapper.loading::after, .reports-table-container.loading::after {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(17, 24, 39, 0.7);
        display: flex;
        justify-content: center;
        align-items: center;
        z-index: 10;
        border-radius: 8px;
      }
      
      .reports-chart-wrapper.loading::before, .reports-table-container.loading::before {
        content: '';
        position: absolute;
        top: 50%;
        left: 50%;
        width: 40px;
        height: 40px;
        margin-top: -20px;
        margin-left: -20px;
        border: 4px solid rgba(255, 255, 255, 0.3);
        border-top: 4px solid #6366f1;
        border-radius: 50%;
        animation: spin 1s linear infinite;
        z-index: 11;
      }
      
      @keyframes spin {
        0% { transform: rotate(0deg); }
        100% { transform: rotate(360deg); }
      }
    `;
    document.head.appendChild(style);
  }
}

// H√†m t·∫°o loading overlay n·∫øu ch∆∞a t·ªìn t·∫°i
function createLoadingOverlay() {
  console.log('Ki·ªÉm tra v√† t·∫°o loading overlay n·∫øu c·∫ßn');
  
  // Ki·ªÉm tra xem loading overlay ƒë√£ t·ªìn t·∫°i ch∆∞a
  let loadingOverlay = document.querySelector('.loading-overlay');
  
  if (!loadingOverlay) {
    console.log('T·∫°o loading overlay m·ªõi');
    
    // T·∫°o ph·∫ßn t·ª≠ loading overlay
    loadingOverlay = document.createElement('div');
    loadingOverlay.className = 'loading-overlay';
    loadingOverlay.style.position = 'fixed';
    loadingOverlay.style.top = '0';
    loadingOverlay.style.left = '0';
    loadingOverlay.style.width = '100%';
    loadingOverlay.style.height = '100%';
    loadingOverlay.style.backgroundColor = 'rgba(0, 0, 0, 0.5)';
    loadingOverlay.style.display = 'none';
    loadingOverlay.style.justifyContent = 'center';
    loadingOverlay.style.alignItems = 'center';
    loadingOverlay.style.zIndex = '9999';
    
    // T·∫°o spinner
    const spinner = document.createElement('div');
    spinner.className = 'spinner-border text-light';
    spinner.setAttribute('role', 'status');
    
    // T·∫°o text cho spinner
    const spinnerText = document.createElement('span');
    spinnerText.className = 'visually-hidden';
    spinnerText.textContent = 'ƒêang t·∫£i...';
    
    // Gh√©p c√°c ph·∫ßn t·ª≠ l·∫°i
    spinner.appendChild(spinnerText);
    loadingOverlay.appendChild(spinner);
    
    // Th√™m v√†o body
    document.body.appendChild(loadingOverlay);
    
    console.log('ƒê√£ t·∫°o loading overlay th√†nh c√¥ng');
  } else {
    console.log('Loading overlay ƒë√£ t·ªìn t·∫°i');
  }
  
  return loadingOverlay;
}

// Kh·ªüi t·∫°o Supabase client n·∫øu ch∆∞a c√≥
function initSupabaseClient() {
  // N·∫øu ƒë√£ c√≥ client, tr·∫£ v·ªÅ lu√¥n
  if (window.supabase && window.supabase.auth) {
    console.log('S·ª≠ d·ª•ng Supabase client hi·ªán c√≥');
    return window.supabase;
  }
  
  try {
    console.log('Kh·ªüi t·∫°o Supabase client m·ªõi...');
    const SUPABASE_URL = 'https://iifnfqsusnjqyvegwchr.supabase.co';
    const SUPABASE_ANON_KEY = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImlpZm5mcXN1c25qcXl2ZWd3Y2hyIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDE1Nzk2MDQsImV4cCI6MjA1NzE1NTYwNH0.Lei4t4UKezBHkb3CNcXuVQ5S4Fr0fY0J4oswu-GtcVU';
    
    // T·∫°o client
    const client = supabase.createClient(SUPABASE_URL, SUPABASE_ANON_KEY);
    
    // L∆∞u v√†o window object
    window.supabase = client;
    console.log('‚úÖ Kh·ªüi t·∫°o Supabase client th√†nh c√¥ng');
    
    // Ki·ªÉm tra k·∫øt n·ªëi v√† b·∫£ng
    checkSupabaseTables(client);
    
    return client;
  } catch (error) {
    console.error('‚ùå L·ªói kh·ªüi t·∫°o Supabase client:', error);
    return null;
  }
}

// Ki·ªÉm tra b·∫£ng trong Supabase
async function checkSupabaseTables(client) {
  try {
    console.log('ƒêang ki·ªÉm tra b·∫£ng child_expenses...');
    
    // Th·ª≠ truy v·∫•n (s·∫Ω th·∫•t b·∫°i n·∫øu b·∫£ng kh√¥ng t·ªìn t·∫°i)
    const { data, error } = await client
      .from('child_expenses')
      .select('id')
      .limit(1);
    
    if (error) {
      console.error('L·ªói khi ki·ªÉm tra b·∫£ng child_expenses:', error);
      console.warn('C√≥ th·ªÉ b·∫£ng child_expenses kh√¥ng t·ªìn t·∫°i ho·∫∑c b·∫°n kh√¥ng c√≥ quy·ªÅn truy c·∫≠p');
      
      // Hi·ªÉn th·ªã th√¥ng b√°o cho ng∆∞·ªùi d√πng
      showNotification('Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn c∆° s·ªü d·ªØ li·ªáu. ƒêang s·ª≠ d·ª•ng d·ªØ li·ªáu m·∫´u.', 'warning');
    } else {
      console.log('B·∫£ng child_expenses t·ªìn t·∫°i v√† c√≥ th·ªÉ truy c·∫≠p');
    }
  } catch (error) {
    console.error('L·ªói khi ki·ªÉm tra b·∫£ng:', error);
  }
}

// Hi·ªÉn th·ªã th√¥ng b√°o 
function showNotification(message, type = 'info') {
  // T·∫°o element th√¥ng b√°o
  const notification = document.createElement('div');
  notification.className = `notification notification-${type}`;
  notification.innerHTML = `
    <div class="notification-content">
      <i class="bi ${type === 'info' ? 'bi-info-circle' : type === 'warning' ? 'bi-exclamation-triangle' : 'bi-check-circle'}"></i>
      <span>${message}</span>
    </div>
    <button class="notification-close"><i class="bi bi-x"></i></button>
  `;
  
  // Th√™m v√†o DOM
  document.body.appendChild(notification);
  
  // Hi·ªÉn th·ªã sau 10ms ƒë·ªÉ c√≥ hi·ªáu ·ª©ng
  setTimeout(() => {
    notification.classList.add('show');
  }, 10);
  
  // X·ª≠ l√Ω n√∫t ƒë√≥ng
  const closeBtn = notification.querySelector('.notification-close');
  closeBtn.addEventListener('click', () => {
    notification.classList.remove('show');
    setTimeout(() => {
      notification.remove();
    }, 300);
  });
  
  // T·ª± ƒë·ªông ·∫©n sau 5s
  setTimeout(() => {
    notification.classList.remove('show');
    setTimeout(() => {
      notification.remove();
    }, 300);
  }, 5000);
}

// Ki·ªÉm tra x√°c th·ª±c ng∆∞·ªùi d√πng
async function checkAuth() {
  try {
    showLoading();
    
    console.log('B·∫Øt ƒë·∫ßu ki·ªÉm tra x√°c th·ª±c ng∆∞·ªùi d√πng...');
    
    // ƒê·∫£m b·∫£o DOM ƒë√£ t·∫£i xong
    if (document.readyState === 'loading') {
      console.log('DOM ch∆∞a s·∫µn s√†ng, ƒë·ª£i DOMContentLoaded...');
      await new Promise(resolve => {
        document.addEventListener('DOMContentLoaded', resolve);
      });
    }
    
    // L·∫•y token t·ª´ cookie ho·∫∑c c√°c ngu·ªìn kh√°c
    const token = getCookie('sb_token') || localStorage.getItem('token') || sessionStorage.getItem('sb_token');
    console.log('Token s·ª≠ d·ª•ng ƒë·ªÉ x√°c th·ª±c:', token ? 'C√≥ token' : 'Kh√¥ng c√≥ token');
    
    if (!token) {
      console.error('Kh√¥ng t√¨m th·∫•y token ƒëƒÉng nh·∫≠p');
      window.location.href = '/login';
      return;
    }

    // ƒê·ª£i m·ªôt ch√∫t ƒë·ªÉ ƒë·∫£m b·∫£o m·ªçi th·ª© ƒë∆∞·ª£c kh·ªüi t·∫°o
    await new Promise(resolve => setTimeout(resolve, 500));

    // Kh·ªüi t·∫°o Supabase client n·∫øu ch∆∞a c√≥
    const client = initSupabaseClient();
    
    if (!client || !client.auth) {
      console.error('‚ùå Kh√¥ng th·ªÉ kh·ªüi t·∫°o ho·∫∑c truy c·∫≠p Supabase client');
      hideLoading();
      showError('Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn c∆° s·ªü d·ªØ li·ªáu. Vui l√≤ng t·∫£i l·∫°i trang.');
      return;
    }
    
    // Thi·∫øt l·∫≠p session v·ªõi token
    console.log('ƒêang x√°c th·ª±c v·ªõi Supabase auth client...');
    
    // S·ª≠ d·ª•ng getUser v·ªõi token
    try {
      console.log('G·ªçi authClient.getUser() v·ªõi token');
      const { data, error } = await client.auth.getUser(token);
      
      if (error) {
        console.error('Token kh√¥ng h·ª£p l·ªá ho·∫∑c h·∫øt h·∫°n:', error);
        hideLoading();
        showError('Phi√™n ƒëƒÉng nh·∫≠p h·∫øt h·∫°n. Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i.');
        window.location.href = '/login';
        return;
      }
      
      if (!data || !data.user) {
        console.error('Kh√¥ng t√¨m th·∫•y th√¥ng tin ng∆∞·ªùi d√πng');
        hideLoading();
        showError('Kh√¥ng th·ªÉ l·∫•y th√¥ng tin ng∆∞·ªùi d√πng. Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i.');
        window.location.href = '/login';
        return;
      }
      
      // L∆∞u th√¥ng tin ng∆∞·ªùi d√πng
      updateUserData(data.user);
      
      // T·∫£i d·ªØ li·ªáu b√°o c√°o
      loadReportData();
    } catch (error) {
      console.error('L·ªói khi g·ªçi getUser:', error);
      hideLoading();
      showError('L·ªói x√°c th·ª±c. Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i.');
      window.location.href = '/login';
    }
  } catch (error) {
    console.error('L·ªói x√°c th·ª±c:', error);
    hideLoading();
    showError('Kh√¥ng th·ªÉ x√°c th·ª±c. Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i.');
  }
}

// C·∫≠p nh·∫≠t th√¥ng tin ng∆∞·ªùi d√πng tr√™n giao di·ªán
function updateUserData(user) {
  try {
    // ƒê·ªìng b·ªô h√≥a user data n·∫øu c√≥ th·ªÉ
    if (typeof window.syncUserData === 'function') {
      window.syncUserData(user);
    } else {
      window.userData = user;
    }
    
    // Log th√¥ng tin x√°c th·ª±c th√†nh c√¥ng
    console.log('‚úÖ X√°c th·ª±c th√†nh c√¥ng:', user.email);
    
    // C·∫≠p nh·∫≠t avatar v√† t√™n ng∆∞·ªùi d√πng
    const userNameElement = document.getElementById('userName');
    const userAvatarElement = document.getElementById('userAvatar');
    
    if (userNameElement) {
      userNameElement.textContent = user.email || 'Ng∆∞·ªùi d√πng';
    }
    
    if (userAvatarElement) {
      userAvatarElement.src = user.user_metadata?.avatar_url || '/images/avatar-placeholder.jpg';
      userAvatarElement.alt = user.email || 'Avatar';
    }
    
    // ·∫®n loading n·∫øu c√≥
    hideLoading();
    
    // T·∫£i d·ªØ li·ªáu b√°o c√°o
    loadReportData();
  } catch (error) {
    console.error('L·ªói khi c·∫≠p nh·∫≠t th√¥ng tin ng∆∞·ªùi d√πng:', error);
    hideLoading();
  }
}

// H√†m l·∫•y cookie
function getCookie(name) {
  const value = `; ${document.cookie}`;
  const parts = value.split(`; ${name}=`);
  if (parts.length === 2) return parts.pop().split(';').shift();
  return null;
}

// Thi·∫øt l·∫≠p c√°c s·ª± ki·ªán cho trang reports
function setupEventListeners() {
  try {
    console.log('Thi·∫øt l·∫≠p c√°c s·ª± ki·ªán cho trang reports');
    
    // Toggle sidebar
    const toggleSidebarBtn = document.getElementById('toggleSidebar');
    if (toggleSidebarBtn) {
      toggleSidebarBtn.addEventListener('click', toggleSidebar);
    }
    
    // Logout button
    const logoutBtn = document.getElementById('logoutBtn');
    if (logoutBtn) {
      logoutBtn.addEventListener('click', handleLogout);
    }
    
    // Setup dropdowns
    setupDropdowns();
    
    // Export buttons
    setupExportButtons();
    
    // Ki·ªÉm tra xem c√≥ ƒëang ·ªü trang reports hay kh√¥ng
    const isReportsPage = window.location.pathname.includes('/reports');
    if (isReportsPage) {
      // C√°c s·ª± ki·ªán kh√°c cho trang reports
      document.addEventListener('click', (e) => {
        // ƒê√≥ng t·∫•t c·∫£ dropdown khi click ra ngo√†i
        if (!e.target.closest('.reports-dropdown')) {
          closeAllDropdowns();
        }
      });
    }
    
  } catch (error) {
    console.error('L·ªói khi thi·∫øt l·∫≠p s·ª± ki·ªán:', error);
  }
}

// Thi·∫øt l·∫≠p t·∫•t c·∫£ dropdown
function setupDropdowns() {
  // T·∫°o backdrop n·∫øu ch∆∞a c√≥
  if (!document.querySelector('.reports-dropdown-backdrop')) {
    const backdrop = document.createElement('div');
    backdrop.className = 'reports-dropdown-backdrop';
    document.body.appendChild(backdrop);
    
    // X·ª≠ l√Ω click backdrop ƒë·ªÉ ƒë√≥ng t·∫•t c·∫£ dropdown
    backdrop.addEventListener('click', closeAllDropdowns);
  }
  
  // Report type dropdown
  setupDropdown('report-type-toggle', 'report-type-menu', (item) => {
    const reportType = item.dataset.report;
    changeReportType(reportType);
  });
  
  // Time range dropdown
  setupDropdown('time-range-toggle', 'time-range-menu', (item) => {
    const timeRange = item.dataset.range;
    changeTimeRange(timeRange);
    
    // Hi·ªÉn th·ªã/·∫©n custom date range
    const customDateRange = document.getElementById('customDateRange');
    if (customDateRange) {
      customDateRange.style.display = timeRange === 'custom' ? 'block' : 'none';
    }
  });
  
  // Payment status dropdown
  setupDropdown('payment-status-toggle', 'payment-status-menu', (item) => {
    const status = item.dataset.status;
    changePaymentStatus(status);
  });
  
  console.log('ƒê√£ thi·∫øt l·∫≠p t·∫•t c·∫£ dropdown');
}

// H√†m chung ƒë·ªÉ thi·∫øt l·∫≠p dropdown
function setupDropdown(toggleId, menuId, onItemClick) {
  const toggleButton = document.getElementById(toggleId);
  const dropdown = toggleButton?.closest('.reports-dropdown');
  const menu = document.getElementById(menuId);
  
  if (!toggleButton || !dropdown || !menu) {
    console.warn(`Kh√¥ng t√¨m th·∫•y ph·∫ßn t·ª≠ dropdown ${toggleId}`);
    return;
  }
  
  console.log(`Thi·∫øt l·∫≠p dropdown: ${toggleId}`);
  
  // X√≥a s·ª± ki·ªán c≈© (n·∫øu c√≥)
  const newToggleButton = toggleButton.cloneNode(true);
  toggleButton.parentNode.replaceChild(newToggleButton, toggleButton);
  
  // Click v√†o toggle button
  newToggleButton.addEventListener('click', function(e) {
    e.stopPropagation();
    e.preventDefault();
    
    console.log(`Click v√†o dropdown ${toggleId}`);
    
    // ƒê√≥ng c√°c dropdown kh√°c
    document.querySelectorAll('.reports-dropdown').forEach(d => {
      if (d !== dropdown && d.classList.contains('active')) {
        d.classList.remove('active');
      }
    });
    
    // Toggle dropdown hi·ªán t·∫°i
    dropdown.classList.toggle('active');
    
    // Toggle backdrop
    if (dropdown.classList.contains('active')) {
      document.body.classList.add('dropdown-active');
      console.log(`Dropdown ${toggleId} ƒë√£ m·ªü`);
    } else {
      document.body.classList.remove('dropdown-active');
      console.log(`Dropdown ${toggleId} ƒë√£ ƒë√≥ng`);
    }
  });
  
  // Click v√†o dropdown item
  const items = menu.querySelectorAll('.reports-dropdown-item');
  items.forEach(item => {
    // X√≥a s·ª± ki·ªán c≈© (n·∫øu c√≥)
    const newItem = item.cloneNode(true);
    item.parentNode.replaceChild(newItem, item);
    
    newItem.addEventListener('click', function() {
      console.log(`Click v√†o item: ${newItem.textContent.trim()}`);
      
      // C·∫≠p nh·∫≠t UI
      menu.querySelectorAll('.reports-dropdown-item').forEach(i => i.classList.remove('active'));
      newItem.classList.add('active');
      
      // C·∫≠p nh·∫≠t n·ªôi dung toggle button
      const selectedText = newToggleButton.querySelector('.reports-selected-text');
      if (selectedText) {
        selectedText.textContent = newItem.textContent.trim();
      }
      
      // Callback
      if (typeof onItemClick === 'function') {
        onItemClick(newItem);
      }
      
      // ƒê√≥ng dropdown
      dropdown.classList.remove('active');
      document.body.classList.remove('dropdown-active');
    });
  });
  
  // NgƒÉn s·ª± ki·ªán click truy·ªÅn ra ngo√†i dropdown menu
  menu.addEventListener('click', (e) => {
    e.stopPropagation();
  });
}

// ƒê√≥ng t·∫•t c·∫£ dropdown
function closeAllDropdowns() {
  document.querySelectorAll('.reports-dropdown.active').forEach(dropdown => {
    dropdown.classList.remove('active');
  });
  document.body.classList.remove('dropdown-active');
}

// Thi·∫øt l·∫≠p c√°c n√∫t xu·∫•t b√°o c√°o
function setupExportButtons() {
  const exportButtons = [
    { id: 'export-time-pdf', type: 'time', format: 'pdf' },
    { id: 'export-time-excel', type: 'time', format: 'excel' },
    { id: 'export-category-pdf', type: 'category', format: 'pdf' },
    { id: 'export-category-excel', type: 'category', format: 'excel' },
    { id: 'export-comparison-pdf', type: 'comparison', format: 'pdf' },
    { id: 'export-comparison-excel', type: 'comparison', format: 'excel' },
    { id: 'export-detail-pdf', type: 'detail', format: 'pdf' }
  ];
  
  exportButtons.forEach(button => {
    const element = document.getElementById(button.id);
    if (element) {
      element.addEventListener('click', () => exportReport(button.type, button.format));
    } else {
      console.warn(`Kh√¥ng t√¨m th·∫•y n√∫t xu·∫•t b√°o c√°o: ${button.id}`);
    }
  });
  
  // N√∫t xu·∫•t PDF ·ªü trang chi ti·∫øt
  const pdfButton = document.querySelector('.export-pdf-btn');
  if (pdfButton) {
    pdfButton.addEventListener('click', () => exportReport('detail', 'pdf'));
  }
  
  // Th√™m s·ª± ki·ªán cho n√∫t PDF ·ªü header
  const pdfHeaderButton = document.querySelector('[data-export="pdf"]');
  if (pdfHeaderButton) {
    pdfHeaderButton.addEventListener('click', () => {
      // X√°c ƒë·ªãnh b√°o c√°o hi·ªán t·∫°i d·ª±a tr√™n currentReportType
      exportReport(currentReportType, 'pdf');
    });
  }
}

// Toggle sidebar
function toggleSidebar() {
  const sidebar = document.querySelector('.sidebar');
  sidebar.classList.toggle('collapsed');
  
  const toggleButton = document.getElementById('toggleSidebar');
  const icon = toggleButton.querySelector('i');
  
  if (sidebar.classList.contains('collapsed')) {
    icon.classList.remove('bi-arrow-left');
    icon.classList.add('bi-arrow-right');
  } else {
    icon.classList.remove('bi-arrow-right');
    icon.classList.add('bi-arrow-left');
  }
}

// X·ª≠ l√Ω ƒëƒÉng xu·∫•t
async function handleLogout() {
  if (confirm('B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën ƒëƒÉng xu·∫•t?')) {
    showLoading();
    
    try {
      // ƒêƒÉng xu·∫•t v·ªõi Supabase
      await window.supabase.auth.signOut();
      
      // X√≥a token kh·ªèi t·∫•t c·∫£ n∆°i l∆∞u tr·ªØ
      document.cookie = 'sb_token=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/;';
      localStorage.removeItem('token');
      sessionStorage.removeItem('sb_token');
      localStorage.removeItem('supabase.auth.token');
      
      // Chuy·ªÉn v·ªÅ trang ƒëƒÉng nh·∫≠p
      window.location.href = '/login';
    } catch (error) {
      console.error('L·ªói ƒëƒÉng xu·∫•t:', error);
      hideLoading();
      showError('Kh√¥ng th·ªÉ ƒëƒÉng xu·∫•t. Vui l√≤ng th·ª≠ l·∫°i.');
    }
  }
}

// Hi·ªÉn th·ªã loading
function showLoading() {
  const loadingOverlay = document.querySelector('.loading-overlay');
  if (loadingOverlay) {
    loadingOverlay.style.display = 'flex';
  } else {
    console.warn('Kh√¥ng t√¨m th·∫•y ph·∫ßn t·ª≠ loading-overlay');
    // T·∫°o ph·∫ßn t·ª≠ loading overlay n·∫øu kh√¥ng t·ªìn t·∫°i
    const newLoadingOverlay = document.createElement('div');
    newLoadingOverlay.className = 'loading-overlay';
    newLoadingOverlay.innerHTML = '<div class="spinner-border text-primary" role="status"><span class="visually-hidden">ƒêang t·∫£i...</span></div>';
    newLoadingOverlay.style.display = 'flex';
    newLoadingOverlay.style.position = 'fixed';
    newLoadingOverlay.style.top = '0';
    newLoadingOverlay.style.left = '0';
    newLoadingOverlay.style.width = '100%';
    newLoadingOverlay.style.height = '100%';
    newLoadingOverlay.style.backgroundColor = 'rgba(0, 0, 0, 0.5)';
    newLoadingOverlay.style.zIndex = '9999';
    newLoadingOverlay.style.justifyContent = 'center';
    newLoadingOverlay.style.alignItems = 'center';
    document.body.appendChild(newLoadingOverlay);
  }
}

// ·∫®n loading
function hideLoading() {
  const loadingOverlay = document.querySelector('.loading-overlay');
  if (loadingOverlay) {
    loadingOverlay.style.display = 'none';
  } else {
    console.warn('Kh√¥ng t√¨m th·∫•y ph·∫ßn t·ª≠ loading-overlay ƒë·ªÉ ·∫©n');
  }
}

// Hi·ªÉn th·ªã th√¥ng b√°o l·ªói
function showError(message) {
  // Ki·ªÉm tra xem Toastify c√≥ t·ªìn t·∫°i kh√¥ng
  if (typeof Toastify === 'function') {
    Toastify({
      text: message,
      duration: 3000,
      gravity: "top",
      position: "right",
      backgroundColor: CONFIG.colors.error,
      stopOnFocus: true
    }).showToast();
  } else {
    // S·ª≠ d·ª•ng h√†m showNotification n·∫øu kh√¥ng c√≥ Toastify
    console.error('L·ªói:', message);
    showNotification(message, 'error');
  }
}

// Hi·ªÉn th·ªã th√¥ng b√°o th√†nh c√¥ng
function showSuccess(message) {
  // Ki·ªÉm tra xem Toastify c√≥ t·ªìn t·∫°i kh√¥ng
  if (typeof Toastify === 'function') {
    Toastify({
      text: message,
      duration: 3000,
      gravity: "top",
      position: "right",
      backgroundColor: CONFIG.colors.success,
      stopOnFocus: true
    }).showToast();
  } else {
    // S·ª≠ d·ª•ng h√†m showNotification n·∫øu kh√¥ng c√≥ Toastify
    console.log('Th√†nh c√¥ng:', message);
    showNotification(message, 'success');
  }
}

// Thay ƒë·ªïi lo·∫°i b√°o c√°o
function changeReportType(reportType) {
  currentReportType = reportType;
  
  // ·∫®n t·∫•t c·∫£ b√°o c√°o
  const timeReport = document.getElementById('time-report');
  const categoryReport = document.getElementById('category-report');
  const comparisonReport = document.getElementById('comparison-report');
  const detailReport = document.getElementById('detail-report');
  
  // Ki·ªÉm tra v√† ·∫©n c√°c b√°o c√°o
  if (timeReport) timeReport.style.display = 'none';
  if (categoryReport) categoryReport.style.display = 'none';
  if (comparisonReport) comparisonReport.style.display = 'none';
  if (detailReport) detailReport.style.display = 'none';
  
  // Hi·ªÉn th·ªã b√°o c√°o ƒë∆∞·ª£c ch·ªçn
  const selectedReport = document.getElementById(`${reportType}-report`);
  if (selectedReport) {
    selectedReport.style.display = 'block';
  } else {
    console.warn(`Kh√¥ng t√¨m th·∫•y ph·∫ßn t·ª≠ b√°o c√°o: ${reportType}-report`);
  }
  
  // T·∫£i d·ªØ li·ªáu b√°o c√°o
  if (reportType === 'comparison') {
    loadComparisonData();
  } else if (reportType === 'detail') {
    loadDetailReport();
  } else {
    loadReportData();
  }
}

// Thay ƒë·ªïi ph·∫°m vi th·ªùi gian
function changeTimeRange(timeRange) {
  currentTimeRange = timeRange;
  
  // ·∫®n/hi·ªán custom date range
  const customDateRange = document.getElementById('customDateRange');
  if (customDateRange) {
    customDateRange.style.display = timeRange === 'custom' ? 'block' : 'none';
  } else {
    console.warn('Kh√¥ng t√¨m th·∫•y ph·∫ßn t·ª≠ customDateRange');
  }
  
  // N·∫øu kh√¥ng ph·∫£i custom, t·∫£i d·ªØ li·ªáu ngay
  if (timeRange !== 'custom') {
    loadReportData();
  }
}

// T·∫£i d·ªØ li·ªáu b√°o c√°o
async function loadReportData() {
  showLoading();
  
  try {
    // Ki·ªÉm tra userData c√≥ t·ªìn t·∫°i kh√¥ng
    if (!window.userData || !window.userData.id) {
      console.error('Ch∆∞a c√≥ th√¥ng tin ng∆∞·ªùi d√πng, kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu b√°o c√°o');
      hideLoading();
      showEmptyState('report-container', 'Kh√¥ng c√≥ d·ªØ li·ªáu ng∆∞·ªùi d√πng. Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ xem b√°o c√°o.');
      return;
    }
    
    console.log(`T·∫£i d·ªØ li·ªáu b√°o c√°o: ${currentReportType}, kho·∫£ng th·ªùi gian: ${currentTimeRange}`);
    
    // T·∫£i d·ªØ li·ªáu theo th·ªùi gian
    if (currentReportType === 'time') {
      await loadTimeReport(window.userData.id);
    }
    
    // T·∫£i d·ªØ li·ªáu theo danh m·ª•c
    if (currentReportType === 'category') {
      await loadCategoryReport(window.userData.id);
    }
    
    // T·∫£i d·ªØ li·ªáu chi ti·∫øt
    if (currentReportType === 'detail') {
      await loadDetailReport(window.userData.id);
    }
    
    hideLoading();
  } catch (error) {
    console.error('L·ªói t·∫£i d·ªØ li·ªáu b√°o c√°o:', error);
    hideLoading();
    showError('Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu b√°o c√°o. Vui l√≤ng th·ª≠ l·∫°i.');
  }
}

// H√†m ƒë·ªãnh d·∫°ng ti·ªÅn t·ªá n·∫øu ch∆∞a c√≥
function formatCurrency(amount) {
  return new Intl.NumberFormat('vi-VN', {
    style: 'currency',
    currency: 'VND',
    minimumFractionDigits: 0,
    maximumFractionDigits: 0
  }).format(amount);
}

// H√†m th·ªëng nh·∫•t ƒë·ªÉ t·∫£i d·ªØ li·ªáu b√°o c√°o theo th·ªùi gian
async function loadTimeReport(userId, startDate, endDate) {
  try {
    console.log("B·∫Øt ƒë·∫ßu t·∫£i d·ªØ li·ªáu b√°o c√°o theo th·ªùi gian...");
    showLoading();
    
    // ƒê·ª£i Chart.js ƒë∆∞·ª£c t·∫£i (n·∫øu c·∫ßn)
    if (typeof Chart === 'undefined') {
      console.log('ƒêang ƒë·ª£i Chart.js ƒë∆∞·ª£c t·∫£i...');
      
      // ƒê·ª£i t·ªëi ƒëa 5 gi√¢y
      for (let i = 0; i < 50; i++) {
        if (typeof Chart !== 'undefined' || window.chartJsLoaded) {
          console.log('Chart.js ƒë√£ s·∫µn s√†ng');
          break;
        }
        await new Promise(resolve => setTimeout(resolve, 100));
      }
      
      // Ki·ªÉm tra l·∫°i sau khi ƒë·ª£i
      if (typeof Chart === 'undefined') {
        console.error('Kh√¥ng th·ªÉ t·∫£i Chart.js sau th·ªùi gian ch·ªù');
        hideLoading();
        showError('Kh√¥ng th·ªÉ t·∫£i th∆∞ vi·ªán bi·ªÉu ƒë·ªì. Vui l√≤ng l√†m m·ªõi trang.');
        return;
      }
    }
    
    // Ki·ªÉm tra canvas
    const canvas = document.getElementById('time-chart');
    if (!canvas) {
      console.error('Kh√¥ng t√¨m th·∫•y canvas #time-chart');
      hideLoading();
      showError('Kh√¥ng th·ªÉ t·∫£i b√°o c√°o: Kh√¥ng t√¨m th·∫•y canvas');
      return;
    }

    // Ki·ªÉm tra table
    const tableBody = document.querySelector('#time-table tbody');
    if (!tableBody) {
      console.error('Kh√¥ng t√¨m th·∫•y b·∫£ng d·ªØ li·ªáu th·ªùi gian');
      hideLoading();
      showError('Kh√¥ng th·ªÉ t·∫£i b√°o c√°o: Kh√¥ng t√¨m th·∫•y b·∫£ng d·ªØ li·ªáu');
      return;
    }
    
    // T√¨m container v√† t·∫°o canvas m·ªõi
    const container = document.querySelector('.reports-chart-wrapper');
    if (container) {
      // X√≥a n·ªôi dung hi·ªán t·∫°i v√† t·∫°o canvas m·ªõi
      container.innerHTML = '';
      const newCanvas = document.createElement('canvas');
      newCanvas.id = 'time-chart';
      newCanvas.style.width = '100%';
      newCanvas.style.height = '100%';
      newCanvas.style.display = 'block';
      container.appendChild(newCanvas);
      
      // C·∫≠p nh·∫≠t style c·ªßa container
      container.style.display = 'block';
      container.style.height = '300px';
      container.style.position = 'relative';
      container.style.width = '100%';
    }
    
    // Ki·ªÉm tra Supabase ƒë√£ ƒë∆∞·ª£c kh·ªüi t·∫°o
    if (!window.supabase) {
      console.error('‚ùå Supabase client ch∆∞a ƒë∆∞·ª£c kh·ªüi t·∫°o');
      hideLoading();
      showError('Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn c∆° s·ªü d·ªØ li·ªáu. Vui l√≤ng t·∫£i l·∫°i trang.');
      return;
    }
    
    // T·∫°o query cho child_expenses (c√°c chi ph√≠ c·ªßa ng∆∞·ªùi d√πng)
    let query = window.supabase
      .from('child_expenses')
      .select('id, noi_dung, gia_tien, ngay_thang, danh_muc, trang_thai, ma_hoa_don');
    
    // √Åp d·ª•ng b·ªô l·ªçc th·ªùi gian
    if (startDate && endDate) {
      query = query.gte('ngay_thang', startDate).lte('ngay_thang', endDate);
    } else {
      // T√≠nh to√°n kho·∫£ng th·ªùi gian d·ª±a v√†o currentTimeRange
      const { startDate: rangeStart, endDate: rangeEnd } = calculateDateRange(currentTimeRange);
      query = query.gte('ngay_thang', rangeStart).lte('ngay_thang', rangeEnd);
    }
    
    // N·∫øu c√≥ userId, ch·ªâ l·∫•y chi ph√≠ c·ªßa user ƒë√≥
    if (userId) {
      query = query.eq('user_id', userId);
    } else if (userData && userData.id) {
      query = query.eq('user_id', userData.id);
    }
    
    // L·ªçc theo tr·∫°ng th√°i thanh to√°n n·∫øu ƒë√£ ch·ªçn
    if (currentPaymentStatus !== 'all') {
      const isPaid = currentPaymentStatus === 'paid';
      query = query.eq('trang_thai', isPaid ? 'ƒê√£ thanh to√°n' : 'Ch∆∞a thanh to√°n');
    }
    
    console.log('ƒêang t·∫£i d·ªØ li·ªáu chi ph√≠ theo th·ªùi gian...');
    const { data: expenses, error } = await query;
    
    if (error) {
      console.error('‚ùå L·ªói khi truy v·∫•n d·ªØ li·ªáu chi ph√≠:', error);
      hideLoading();
      showError('Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu b√°o c√°o: ' + error.message);
      return;
    }
    
    // N·∫øu kh√¥ng c√≥ d·ªØ li·ªáu
    if (!expenses || expenses.length === 0) {
      console.log('‚ö†Ô∏è Kh√¥ng c√≥ d·ªØ li·ªáu chi ph√≠ trong kho·∫£ng th·ªùi gian n√†y');
      tableBody.innerHTML = '<tr><td colspan="3" class="text-center">Kh√¥ng c√≥ d·ªØ li·ªáu chi ti√™u trong kho·∫£ng th·ªùi gian n√†y</td></tr>';
      hideLoading();
      
      // X√≥a bi·ªÉu ƒë·ªì hi·ªán t·∫°i n·∫øu c√≥
      if (currentCharts.timeChart) {
        currentCharts.timeChart.destroy();
        currentCharts.timeChart = null;
      }
      
      // C·∫≠p nh·∫≠t t·ªïng quan v·ªõi gi√° tr·ªã r·ªóng
      updateSummaryWithAnimation({
        totalExpense: 0,
        highestExpense: 0,
        averageExpense: 0,
        highestCategory: { name: 'Ch∆∞a c√≥ d·ªØ li·ªáu', total: 0 }
      });
      
      return;
    }
    
    console.log('‚úÖ ƒê√£ t·∫£i ƒë∆∞·ª£c', expenses.length, 'chi ph√≠');
    console.log('Sample expense:', expenses[0]);
    
    // Chu·∫©n h√≥a d·ªØ li·ªáu
    const normalizedExpenses = expenses.map(expense => ({
      id: expense.id,
      ten_chi_phi: expense.noi_dung,
      gia_tien: expense.gia_tien || 0,
      ngay_bat_dau: expense.ngay_thang,
      danh_muc: expense.danh_muc || 'Kh√°c',
      status: expense.trang_thai
    }));
    
    // T√≠nh to√°n s·ªë li·ªáu t·ªïng quan v√† c·∫≠p nh·∫≠t
    const summary = calculateSummary(normalizedExpenses);
    updateSummaryWithAnimation(summary);
    
    // Hi·ªÉn th·ªã bi·ªÉu ƒë·ªì v√† b·∫£ng
    try {
      // V·∫Ω bi·ªÉu ƒë·ªì - ƒë·∫£m b·∫£o th·ª±c hi·ªán tr∆∞·ªõc khi ti·∫øp t·ª•c
      await renderTimeChartWithAnimation(normalizedExpenses);
      
      // Render b·∫£ng
      renderTimeTableWithAnimation(normalizedExpenses, summary.averageExpense);
      
      // B·ªè g·ªçi h√†m forceRerenderChart v√¨ kh√¥ng c·∫ßn thi·∫øt n·ªØa
      
    } catch (e) {
      console.error('L·ªói khi hi·ªÉn th·ªã d·ªØ li·ªáu:', e);
      showError('Kh√¥ng th·ªÉ hi·ªÉn th·ªã d·ªØ li·ªáu: ' + e.message);
    } finally {
      hideLoading();
    }
    
    return normalizedExpenses;
  } catch (error) {
    console.error('‚ùå L·ªói t·∫£i b√°o c√°o th·ªùi gian:', error);
    showError('Kh√¥ng th·ªÉ t·∫£i b√°o c√°o. Vui l√≤ng th·ª≠ l·∫°i sau.');
    hideLoading();
    return null;
  }
}

// H√†m t·∫°o d·ªØ li·ªáu demo cho b√°o c√°o
function createDemoExpenses() {
  const today = new Date();
  const expenses = [];
  
  // T·∫°o d·ªØ li·ªáu cho 3 th√°ng g·∫ßn nh·∫•t
  for (let i = 0; i < 90; i++) {
    const date = new Date();
    date.setDate(today.getDate() - i);
    
    // D·ªØ li·ªáu ng·∫´u nhi√™n cho m·ªói ng√†y
    if (Math.random() > 0.5) { // 50% ng√†y c√≥ chi ti√™u
      const categories = ['ƒÇn u·ªëng', 'ƒêi l·∫°i', 'Gi·∫£i tr√≠', 'Mua s·∫Øm', 'Nh√† c·ª≠a', 'Gi√°o d·ª•c', 'Y t·∫ø', 'H√≥a ƒë∆°n', 'Kh√°c'];
      const randomCategory = categories[Math.floor(Math.random() * categories.length)];
      
      // T·∫°o 1-3 chi ti√™u cho m·ªói ng√†y
      const expensesCount = Math.floor(Math.random() * 3) + 1;
      
      for (let j = 0; j < expensesCount; j++) {
        expenses.push({
          id: `demo-${i}-${j}`,
          ten_chi_phi: `Chi ti√™u ${j+1} ng√†y ${date.getDate()}/${date.getMonth()+1}`,
          gia_tien: Math.floor(Math.random() * 1000000) + 10000, // 10k - 1M VND
          ngay_bat_dau: date.toISOString().split('T')[0],
          danh_muc: randomCategory,
          status: Math.random() > 0.3 ? 'ƒê√£ thanh to√°n' : 'Ch∆∞a thanh to√°n',
          has_children: false,
          ma_hoa_don: `HD-${Math.floor(Math.random() * 10000)}`,
          loai_chi_phi: 'C√° nh√¢n'
        });
      }
    }
  }
  
  console.log('ƒê√£ t·∫°o d·ªØ li·ªáu demo:', expenses.length, 'chi ti√™u');
  return expenses;
}

// T·∫£i b√°o c√°o theo danh m·ª•c
async function loadCategoryReport(startDate, endDate) {
  try {
    // Hi·ªÉn th·ªã loading
    showLoading();
    
    // Ki·ªÉm tra elements c·∫ßn thi·∫øt
    const chartCanvas = document.getElementById('category-chart');
    const categoryTableBody = document.querySelector('#category-table tbody');
    const totalExpensesEl = document.getElementById('total-expenses');
    const legendContainer = document.getElementById('category-legend');
    
    // Ki·ªÉm tra c√°c ph·∫ßn t·ª≠ UI
    const missingElements = [];
    if (!chartCanvas) missingElements.push('canvas category-chart');
    if (!categoryTableBody) missingElements.push('#category-table tbody');
    if (!totalExpensesEl) missingElements.push('#total-expenses');
    if (!legendContainer) missingElements.push('#category-legend');
    
    if (missingElements.length > 0) {
      console.warn(`Kh√¥ng t√¨m th·∫•y c√°c ph·∫ßn t·ª≠: ${missingElements.join(', ')}`);
      hideLoading();
      return;
    }
    
    console.log('T√¨m th·∫•y t·∫•t c·∫£ c√°c ph·∫ßn t·ª≠ DOM cho b√°o c√°o danh m·ª•c, ti·∫øp t·ª•c t·∫£i d·ªØ li·ªáu');
    
    // Ki·ªÉm tra Supabase ƒë√£ s·∫µn s√†ng ch∆∞a
    if (!window.supabase) {
      console.error('‚ùå Supabase client ch∆∞a ƒë∆∞·ª£c kh·ªüi t·∫°o');
      hideLoading();
      showError('Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn c∆° s·ªü d·ªØ li·ªáu. Vui l√≤ng t·∫£i l·∫°i trang.');
      return;
    }
    
    // X√¢y d·ª±ng query cho chi ph√≠
    let query = window.supabase
      .from('child_expenses')
      .select('id, noi_dung, gia_tien, ngay_thang, danh_muc, trang_thai, ma_hoa_don, loai_chi_phi');
    
    // √Åp d·ª•ng b·ªô l·ªçc th·ªùi gian
    if (startDate && endDate) {
      query = query.gte('ngay_thang', startDate).lte('ngay_thang', endDate);
    } else {
      // T√≠nh to√°n kho·∫£ng th·ªùi gian d·ª±a v√†o currentTimeRange
      const { startDate: rangeStart, endDate: rangeEnd } = calculateDateRange(currentTimeRange);
      query = query.gte('ngay_thang', rangeStart).lte('ngay_thang', rangeEnd);
    }
    
    // Ch·ªâ l·∫•y chi ph√≠ c·ªßa ng∆∞·ªùi d√πng hi·ªán t·∫°i
    if (userData && userData.id) {
      query = query.eq('user_id', userData.id);
    }
    
    // L·ªçc theo tr·∫°ng th√°i thanh to√°n
    if (currentPaymentStatus !== 'all') {
      const isPaid = currentPaymentStatus === 'paid';
      console.log(`L·ªçc theo tr·∫°ng th√°i thanh to√°n: ${currentPaymentStatus}`);
      query = query.eq('trang_thai', isPaid ? 'ƒê√£ thanh to√°n' : 'Ch∆∞a thanh to√°n');
    }
    
    // G·ª≠i query
    console.log('ƒêang g·ª≠i query cho b√°o c√°o danh m·ª•c:', query);
    const { data: expenses, error } = await query;
    
    if (error) {
      console.error('L·ªói khi truy v·∫•n d·ªØ li·ªáu danh m·ª•c:', error);
      hideLoading();
      showError('Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu b√°o c√°o danh m·ª•c: ' + error.message);
      return;
    }
    
    // Ki·ªÉm tra n·∫øu kh√¥ng c√≥ d·ªØ li·ªáu
    if (!expenses || expenses.length === 0) {
      console.log('Kh√¥ng c√≥ d·ªØ li·ªáu chi ti√™u trong kho·∫£ng th·ªùi gian ƒë√£ ch·ªçn');
      categoryTableBody.innerHTML = '<tr><td colspan="3" class="text-center">Kh√¥ng c√≥ d·ªØ li·ªáu chi ti√™u trong kho·∫£ng th·ªùi gian n√†y</td></tr>';
      
      // C·∫≠p nh·∫≠t t·ªïng quan tr·ªëng
      updateSummaryWithAnimation({
        totalExpense: 0,
        highestExpense: 0,
        averageExpense: 0,
        highestCategory: { name: 'Ch∆∞a c√≥ d·ªØ li·ªáu', total: 0 }
      });
      
      hideLoading();
      return;
    }
    
    console.log('ƒê√£ t·∫£i ƒë∆∞·ª£c d·ªØ li·ªáu chi ph√≠ theo danh m·ª•c:', expenses.length, 'b·∫£n ghi');
    
    // Chu·∫©n h√≥a d·ªØ li·ªáu
    const normalizedExpenses = expenses.map(expense => ({
      id: expense.id,
      ten_chi_phi: expense.noi_dung,
      gia_tien: expense.gia_tien,
      ngay_bat_dau: expense.ngay_thang,
      danh_muc: expense.danh_muc || 'Kh√°c',
      status: expense.trang_thai,
      ma_hoa_don: expense.ma_hoa_don,
      loai_chi_phi: expense.loai_chi_phi
    }));
    
    // T√≠nh t·ªïng quan
    const summary = calculateSummary(normalizedExpenses);
    updateSummaryWithAnimation(summary);
    
    // Nh√≥m chi ph√≠ theo danh m·ª•c
    const categoryData = groupByCategory(normalizedExpenses);
    
    // C·∫≠p nh·∫≠t bi·ªÉu ƒë·ªì theo danh m·ª•c v·ªõi hi·ªáu ·ª©ng
    await renderCategoryChartWithAnimation(categoryData);
    
    // C·∫≠p nh·∫≠t b·∫£ng d·ªØ li·ªáu
    renderCategoryTable(categoryData);
    
    // Kh·ªüi t·∫°o tooltips
    setTimeout(initializeTooltips, 200);
    
    hideLoading();
  } catch (error) {
    console.error('L·ªói t·∫£i d·ªØ li·ªáu b√°o c√°o theo danh m·ª•c:', error);
    showError('Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu b√°o c√°o. Vui l√≤ng th·ª≠ l·∫°i.');
    hideLoading();
  }
}

// Nh√≥m chi ph√≠ theo danh m·ª•c
function groupByCategory(expenses) {
  if (!expenses || !Array.isArray(expenses) || expenses.length === 0) {
    return [];
  }
  
  const categories = {};
  
  // T√°ch ri√™ng chi ph√≠ cha v√† con
  const parentExpenses = expenses.filter(expense => !expense.isChild);
  const childExpenses = expenses.filter(expense => expense.isChild);
  
  // Nh√≥m theo danh m·ª•c
  expenses.forEach(expense => {
    // B·ªè qua chi ph√≠ cha c√≥ con (ƒë·ªÉ tr√°nh t√≠nh 2 l·∫ßn)
    if (expense.has_children && childExpenses.some(child => child.parent_id === expense.id)) {
      return;
    }
    
    const amount = expense.gia_tien || 0;
    const category = expense.danh_muc || 'Kh√°c';
    
    if (!categories[category]) {
      categories[category] = 0;
    }
    
    categories[category] += amount;
  });
  
  // T√≠nh t·ªïng chi ph√≠
  const totalExpense = Object.values(categories).reduce((total, value) => total + value, 0);
  
  // Chuy·ªÉn ƒë·ªïi th√†nh m·∫£ng v√† t√≠nh ph·∫ßn trƒÉm
  const result = Object.entries(categories).map(([name, value]) => ({
    name,
    value,
    percentage: totalExpense > 0 ? ((value / totalExpense) * 100).toFixed(1) : 0
  }));
  
  // S·∫Øp x·∫øp theo gi√° tr·ªã gi·∫£m d·∫ßn
  return result.sort((a, b) => b.value - a.value);
}

// T√≠nh to√°n c√°c s·ªë li·ªáu th·ªëng k√™
function calculateSummary(expenses) {
  console.log('T√≠nh to√°n t·ªïng quan v·ªõi', expenses.length, 'chi ph√≠');
  
  // T√≠nh t·ªïng chi ph√≠
  const totalExpense = expenses.reduce((sum, expense) => sum + (expense.gia_tien || 0), 0);
  
  // T√¨m chi ph√≠ cao nh·∫•t
  const highestExpense = expenses.length > 0 
    ? Math.max(...expenses.map(expense => expense.gia_tien || 0)) 
    : 0;
  
  // T√≠nh chi ph√≠ trung b√¨nh (kh√¥ng c·∫ßn chia theo th√°ng)
  const averageExpense = expenses.length > 0 
    ? totalExpense / expenses.length 
    : 0;
  
  // T√¨m danh m·ª•c chi nhi·ªÅu nh·∫•t
  const categoryTotals = {};
  
  // T√≠nh t·ªïng chi ph√≠ theo t·ª´ng danh m·ª•c
  expenses.forEach(expense => {
    const category = expense.danh_muc || 'Kh√°c';
    if (!categoryTotals[category]) {
      categoryTotals[category] = 0;
    }
    categoryTotals[category] += (expense.gia_tien || 0);
  });
  
  // T√¨m danh m·ª•c c√≥ t·ªïng chi ph√≠ cao nh·∫•t
  let highestCategory = { name: 'Ch∆∞a c√≥ d·ªØ li·ªáu', total: 0 };
  
  for (const [category, total] of Object.entries(categoryTotals)) {
    if (total > highestCategory.total) {
      highestCategory = { name: category, total };
    }
  }
  
  console.log('K·∫øt qu·∫£ t√≠nh to√°n t·ªïng quan:', { 
    totalExpense, 
    highestExpense, 
    averageExpense, 
    highestCategory,
    categoryTotals // Log chi ti·∫øt t·ªïng theo t·ª´ng danh m·ª•c
  });
  
  return {
    totalExpense,
    highestExpense,
    averageExpense,
    highestCategory
  };
}

// C·∫≠p nh·∫≠t t·ªïng quan v·ªõi hi·ªáu ·ª©ng animation
function updateSummaryWithAnimation(summary) {
  console.log('C·∫≠p nh·∫≠t t·ªïng quan v·ªõi d·ªØ li·ªáu:', summary);
  
  // T·ªïng chi ph√≠
  const totalElement = document.getElementById('total-expenses');
  if (totalElement) {
    animateNumber(totalElement, 0, summary.totalExpense, 1000);
  } else {
    console.warn('Kh√¥ng t√¨m th·∫•y ph·∫ßn t·ª≠ total-expenses');
  }
  
  // Danh m·ª•c chi nhi·ªÅu nh·∫•t (thay th·∫ø chi ph√≠ cao nh·∫•t)
  const highestCategoryElement = document.getElementById('highest-category');
  if (highestCategoryElement) {
    // Th√™m class ƒë·ªÉ k√≠ch ho·∫°t animation
    highestCategoryElement.classList.add('animated');
    
    // Hi·ªÉn th·ªã t√™n danh m·ª•c v√† t·ªïng ti·ªÅn
    if (summary.highestCategory && summary.highestCategory.total > 0) {
      const formattedValue = `${summary.highestCategory.name}: ${formatCurrency(summary.highestCategory.total)}`;
      // √Åp d·ª•ng tr·ª±c ti·∫øp thay v√¨ d√πng animateNumber v√¨ ƒë√¢y l√† text
      highestCategoryElement.textContent = formattedValue;
      
      // Th√™m tooltip ƒë·ªÉ hi·ªÉn th·ªã % c·ªßa danh m·ª•c n√†y
      const percentage = Math.round((summary.highestCategory.total / summary.totalExpense) * 100);
      highestCategoryElement.setAttribute('data-bs-toggle', 'tooltip');
      highestCategoryElement.setAttribute('data-bs-placement', 'top');
      highestCategoryElement.setAttribute('title', `Chi·∫øm ${percentage}% t·ªïng chi ph√≠`);
    } else {
      highestCategoryElement.textContent = 'Ch∆∞a c√≥ d·ªØ li·ªáu';
    }
    
    // Sau 600ms (th·ªùi gian c·ªßa animation), x√≥a class animated
    setTimeout(() => {
      highestCategoryElement.classList.remove('animated');
    }, 600);
  } else {
    console.warn('Kh√¥ng t√¨m th·∫•y ph·∫ßn t·ª≠ highest-category');
  }
  
  // Chi ph√≠ trung b√¨nh
  const averageElement = document.getElementById('average-expense');
  if (averageElement) {
    animateNumber(averageElement, 0, summary.averageExpense, 1000);
  } else {
    console.warn('Kh√¥ng t√¨m th·∫•y ph·∫ßn t·ª≠ average-expense');
  }
  
  // Kh·ªüi t·∫°o l·∫°i tooltips sau khi c·∫≠p nh·∫≠t
  setTimeout(() => {
    initializeTooltips();
  }, 100);
}

// C·∫≠p nh·∫≠t animateNumber ƒë·ªÉ x·ª≠ l√Ω c·∫£ tr∆∞·ªùng h·ª£p s·ªë v√† text
function animateNumber(element, start, end, duration) {
  // N·∫øu element kh√¥ng t·ªìn t·∫°i, tho√°t h√†m
  if (!element) return;
  
  // Th√™m class animated ƒë·ªÉ k√≠ch ho·∫°t hi·ªáu ·ª©ng
  element.classList.add('animated');
  
  // N·∫øu end kh√¥ng ph·∫£i l√† s·ªë, ch·ªâ c·∫ßn c·∫≠p nh·∫≠t text
  if (isNaN(end)) {
    element.textContent = end;
    // Sau 600ms (th·ªùi gian c·ªßa animation), x√≥a class animated
    setTimeout(() => {
      element.classList.remove('animated');
    }, 600);
    return;
  }
  
  // X√°c ƒë·ªãnh th·ªùi gian b·∫Øt ƒë·∫ßu
  const startTime = performance.now();
  
  // H√†m c·∫≠p nh·∫≠t s·ªë
  const updateNumber = (currentTime) => {
    // T√≠nh to√°n th·ªùi gian ƒë√£ tr√¥i qua
    const elapsedTime = currentTime - startTime;
    
    // N·∫øu v·∫´n trong kho·∫£ng th·ªùi gian animation
    if (elapsedTime < duration) {
      // T√≠nh to√°n gi√° tr·ªã hi·ªán t·∫°i d·ª±a tr√™n th·ªùi gian ƒë√£ tr√¥i qua
      const progress = elapsedTime / duration;
      const currentValue = Math.round(start + progress * (end - start));
      
      // C·∫≠p nh·∫≠t n·ªôi dung ph·∫ßn t·ª≠ v·ªõi ƒë·ªãnh d·∫°ng ti·ªÅn t·ªá
      element.textContent = formatCurrency(currentValue);
      
      // Ti·∫øp t·ª•c animation trong frame ti·∫øp theo
      requestAnimationFrame(updateNumber);
    } else {
      // ƒê√£ ho√†n th√†nh animation, c·∫≠p nh·∫≠t gi√° tr·ªã cu·ªëi c√πng
      element.textContent = formatCurrency(end);
      
      // Sau 600ms (th·ªùi gian c·ªßa animation), x√≥a class animated
      setTimeout(() => {
        element.classList.remove('animated');
      }, 600);
    }
  };
  
  // B·∫Øt ƒë·∫ßu animation
  requestAnimationFrame(updateNumber);
}

// Render bi·ªÉu ƒë·ªì theo th·ªùi gian
async function renderTimeChart(expenses) {
  try {
    console.log("B·∫Øt ƒë·∫ßu renderTimeChart v·ªõi", expenses.length, "chi ph√≠");
    
    // ƒê·∫£m b·∫£o Chart.js ƒë√£ ƒë∆∞·ª£c t·∫£i
    if (typeof Chart === 'undefined') {
      console.log('Chart.js ch∆∞a s·∫µn s√†ng, ƒëang t·∫£i...');
      try {
        detectChartJsLibrary();
      } catch (err) {
        console.error('Kh√¥ng th·ªÉ t·∫£i Chart.js:', err);
        showError('Kh√¥ng th·ªÉ t·∫£i th∆∞ vi·ªán bi·ªÉu ƒë·ªì. Vui l√≤ng l√†m m·ªõi trang v√† th·ª≠ l·∫°i.');
        return;
      }
    }
    
    // L·∫•y canvas
    const canvas = document.getElementById('time-chart');
    if (!canvas) {
      console.error('Kh√¥ng t√¨m th·∫•y canvas cho bi·ªÉu ƒë·ªì th·ªùi gian');
      return;
    }
    
    // Ki·ªÉm tra canvas context
    const ctx = canvas.getContext('2d');
    if (!ctx) {
      console.error('Kh√¥ng th·ªÉ l·∫•y context t·ª´ canvas');
      return;
    }
    
    // ƒê·∫£m b·∫£o canvas c√≥ k√≠ch th∆∞·ªõc h·ª£p l·ªá
    // L·∫•y k√≠ch th∆∞·ªõc th·ª±c t·ª´ parent container
    const parent = canvas.parentElement;
    if (parent) {
      // Thi·∫øt l·∫≠p style
      canvas.style.width = '100%';
      canvas.style.height = '100%';
      canvas.style.display = 'block';
      
      // Thi·∫øt l·∫≠p k√≠ch th∆∞·ªõc th·ª±c cho canvas
      const parentWidth = parent.offsetWidth || 600;
      const parentHeight = parent.offsetHeight || 300;
      canvas.width = parentWidth;
      canvas.height = parentHeight;
      console.log(`Canvas k√≠ch th∆∞·ªõc: ${canvas.width} x ${canvas.height}`);
    }
    
    // X√≥a bi·ªÉu ƒë·ªì c≈© n·∫øu c√≥
    if (currentCharts.timeChart) {
      console.log('X√≥a bi·ªÉu ƒë·ªì c≈©');
      currentCharts.timeChart.destroy();
      currentCharts.timeChart = null;
    }
    
    // Nh√≥m chi ph√≠ theo th·ªùi gian
    const groupedData = groupByTime(expenses, currentTimeRange);
    console.log("D·ªØ li·ªáu ƒë√£ nh√≥m cho bi·ªÉu ƒë·ªì:", groupedData);
    
    // Ki·ªÉm tra n·∫øu kh√¥ng c√≥ d·ªØ li·ªáu
    if (!groupedData || groupedData.length === 0) {
      console.warn('Kh√¥ng c√≥ d·ªØ li·ªáu ƒë·ªÉ hi·ªÉn th·ªã bi·ªÉu ƒë·ªì!');
      return;
    }
    
    // Chu·∫©n b·ªã d·ªØ li·ªáu cho bi·ªÉu ƒë·ªì
    const labels = groupedData.map(item => item.label);
    const data = groupedData.map(item => item.total);
    console.log("Labels:", labels);
    console.log("Data:", data);
    
    // Ki·ªÉm tra darkmode
    const isDarkMode = document.documentElement.getAttribute('data-theme') === 'dark';
    
    // T·∫°o gradient cho background
    const gradient = ctx.createLinearGradient(0, 0, 0, canvas.height);
    if (isDarkMode) {
      gradient.addColorStop(0, 'rgba(102, 116, 255, 0.5)');
      gradient.addColorStop(1, 'rgba(102, 116, 255, 0.05)');
    } else {
      gradient.addColorStop(0, 'rgba(99, 102, 241, 0.3)');
      gradient.addColorStop(1, 'rgba(99, 102, 241, 0.0)');
    }
    
    // M√†u s·∫Øc v√† thi·∫øt l·∫≠p thay ƒë·ªïi theo ch·∫ø ƒë·ªô
    const primaryColor = isDarkMode ? '#818cf8' : '#6366f1';
    const gridColor = isDarkMode ? 'rgba(255, 255, 255, 0.1)' : 'rgba(0, 0, 0, 0.05)';
    const tickColor = isDarkMode ? '#cbd5e1' : '#64748b';
    const tooltipBgColor = isDarkMode ? 'rgba(15, 23, 42, 0.9)' : 'rgba(30, 41, 59, 0.9)';
    const tooltipTextColor = isDarkMode ? '#f8fafc' : '#f8fafc';
    
    // Thi·∫øt l·∫≠p c·∫•u h√¨nh bi·ªÉu ƒë·ªì
    const chartConfig = {
      type: 'line',
      data: {
        labels: labels,
        datasets: [{
          label: 'Chi ph√≠',
          data: data,
          borderColor: '#6674ff',
          borderWidth: 3,
          pointBackgroundColor: '#ffffff',
          pointBorderColor: '#6674ff',
          pointBorderWidth: 2,
          pointRadius: 6,
          pointHoverRadius: 8,
          tension: 0.3,
          fill: true,
          backgroundColor: gradient
        }]
      },
      options: {
        responsive: true,
        maintainAspectRatio: false,
        plugins: {
          legend: {
            display: false
          },
          tooltip: {
            backgroundColor: tooltipBgColor,
            titleColor: tooltipTextColor,
            bodyColor: tooltipTextColor,
            titleFont: {
              size: 14,
              weight: 'bold',
              family: "'Inter', sans-serif"
            },
            bodyFont: {
              size: 13,
              family: "'Inter', sans-serif"
            },
            padding: 12,
            cornerRadius: 8,
            displayColors: false,
            callbacks: {
              label: function(context) {
                return `Chi ph√≠: ${formatCurrency(context.parsed.y)}`;
              }
            }
          }
        },
        interaction: {
          mode: 'index',
          intersect: false,
        },
        hover: {
          mode: 'nearest',
          intersect: true
        },
        scales: {
          x: {
            grid: {
              display: true,
              color: gridColor,
              drawBorder: false,
            },
            ticks: {
              color: tickColor,
              font: {
                family: "'Inter', sans-serif",
                size: 12
              },
              padding: 10
            }
          },
          y: {
            grid: {
              display: true,
              color: gridColor,
              drawBorder: false,
            },
            ticks: {
              color: tickColor,
              font: {
                family: "'Inter', sans-serif",
                size: 12
              },
              padding: 10,
              callback: function(value) {
                return formatCurrency(value);
              }
            }
          }
        }
      }
    };
    
    // T·∫°o bi·ªÉu ƒë·ªì m·ªõi
    try {
      console.log("ƒêang t·∫°o bi·ªÉu ƒë·ªì m·ªõi...");
      
      // T·∫°o bi·ªÉu ƒë·ªì
      currentCharts.timeChart = new Chart(ctx, chartConfig);
      
      console.log("ƒê√£ t·∫°o bi·ªÉu ƒë·ªì th√†nh c√¥ng");
      
      // L∆∞u bi·ªÉu ƒë·ªì v√†o global cho ph√≤ng tr∆∞·ªùng h·ª£p currentCharts b·ªã reset
      window.timeChart = currentCharts.timeChart;
      
      return currentCharts.timeChart;
    } catch (chartError) {
      console.error("L·ªói khi t·∫°o bi·ªÉu ƒë·ªì:", chartError);
      throw chartError;
    }
  } catch (error) {
    console.error('L·ªói khi t·∫°o bi·ªÉu ƒë·ªì th·ªùi gian:', error);
    console.error('Chi ti·∫øt l·ªói:', error.message, error.stack);
    throw error;
  }
}

// Nh√≥m d·ªØ li·ªáu theo th·ªùi gian
function groupByTime(expenses, timeRange) {
  try {
    if (!expenses || !Array.isArray(expenses) || expenses.length === 0) {
      console.warn('Kh√¥ng c√≥ d·ªØ li·ªáu expenses h·ª£p l·ªá');
      return [];
    }
    
    const validExpenses = expenses.filter(exp => {
      const date = exp.ngay_thang || exp.ngay_bat_dau;
      return date && !isNaN(new Date(date).getTime());
    });
    
    if (validExpenses.length === 0) {
      console.warn('Kh√¥ng c√≥ chi ph√≠ n√†o c√≥ ng√†y th√°ng h·ª£p l·ªá');
      return [];
    }
    
    const sortedExpenses = [...validExpenses].sort((a, b) => {
      const dateA = new Date(a.ngay_thang || a.ngay_bat_dau);
      const dateB = new Date(b.ngay_thang || b.ngay_bat_dau);
      return dateA - dateB;
    });
    
    const result = [];
    const monthNames = ['Th√°ng 1', 'Th√°ng 2', 'Th√°ng 3', 'Th√°ng 4', 'Th√°ng 5', 'Th√°ng 6',
      'Th√°ng 7', 'Th√°ng 8', 'Th√°ng 9', 'Th√°ng 10', 'Th√°ng 11', 'Th√°ng 12'];
    
    if (timeRange === 'month' || timeRange === 'thisMonth' || timeRange === 'lastMonth') {
      const days = {};
      for (const expense of sortedExpenses) {
        const date = new Date(expense.ngay_thang || expense.ngay_bat_dau);
        const day = date.getDate();
        const label = `Ng√†y ${day}`;
        days[label] = (days[label] || 0) + (expense.gia_tien || 0);
      }
      result.push(...Object.entries(days).map(([label, total]) => ({ label, total })));
      result.sort((a, b) => parseInt(a.label.replace('Ng√†y ', '')) - parseInt(b.label.replace('Ng√†y ', '')));
    } else if (timeRange === 'quarter' || timeRange === 'thisQuarter') {
      const months = {};
      for (const expense of sortedExpenses) {
        const date = new Date(expense.ngay_thang || expense.ngay_bat_dau);
        const month = date.getMonth();
        const label = monthNames[month];
        months[label] = (months[label] || 0) + (expense.gia_tien || 0);
      }
      result.push(...Object.entries(months).map(([label, total]) => ({ label, total })));
      result.sort((a, b) => monthNames.indexOf(a.label) - monthNames.indexOf(b.label));
    } else {
      const months = {};
      for (const expense of sortedExpenses) {
        const date = new Date(expense.ngay_thang || expense.ngay_bat_dau);
        const month = date.getMonth();
        const label = monthNames[month];
        months[label] = (months[label] || 0) + (expense.gia_tien || 0);
      }
      result.push(...Object.entries(months).map(([label, total]) => ({ label, total })));
      result.sort((a, b) => monthNames.indexOf(a.label) - monthNames.indexOf(b.label));
    }
    
    console.log('D·ªØ li·ªáu ƒë√£ nh√≥m theo th·ªùi gian:', result);
    return result;
  } catch (error) {
    console.error('L·ªói khi nh√≥m d·ªØ li·ªáu theo th·ªùi gian:', error);
    return [];
  }
}

// Render b·∫£ng d·ªØ li·ªáu theo th·ªùi gian
function renderTimeTable(timeData, averageExpense) {
  const tableBody = document.querySelector('#time-table tbody');
  if (!tableBody) {
    console.warn('Kh√¥ng t√¨m th·∫•y ph·∫ßn t·ª≠ #time-table tbody');
    return;
  }
  
  tableBody.innerHTML = '';
  
  // Nh√≥m d·ªØ li·ªáu theo th·ªùi gian
  const groupedData = groupByTime(timeData, currentTimeRange);
  
  // L·∫∑p qua d·ªØ li·ªáu ƒë√£ nh√≥m
  for (const item of groupedData) {
    const row = document.createElement('tr');
    
    // T√≠nh ph·∫ßn trƒÉm so v·ªõi trung b√¨nh
    const percentageOfAverage = averageExpense > 0 ? (item.total / averageExpense) * 100 : 0;
    const percentageDiff = percentageOfAverage - 100;
    const percentageClass = percentageDiff > 0 ? 'text-danger' : 'text-success';
    const percentageIcon = percentageDiff > 0 ? 'bi-arrow-up-right' : 'bi-arrow-down-right';
    const percentageText = `${Math.abs(percentageDiff).toFixed(1)}%`;
    
    row.innerHTML = `
      <td>${item.label}</td>
      <td>${formatCurrency(item.total)}</td>
      <td class="${percentageClass}">
        <i class="bi ${percentageIcon}"></i> ${percentageText}
      </td>
    `;
    
    tableBody.appendChild(row);
  }
}

// Render bi·ªÉu ƒë·ªì theo danh m·ª•c
function renderCategoryChart(categoryData) {
  try {
    console.log("B·∫Øt ƒë·∫ßu renderCategoryChart v·ªõi", categoryData.length, "danh m·ª•c");
    
    // L·∫•y canvas
    const canvas = document.getElementById('category-chart');
    if (!canvas) {
      console.error('Kh√¥ng t√¨m th·∫•y canvas cho bi·ªÉu ƒë·ªì danh m·ª•c');
      return;
    }
    
    // Ki·ªÉm tra canvas context
    const ctx = canvas.getContext('2d');
    if (!ctx) {
      console.error('Kh√¥ng th·ªÉ l·∫•y context t·ª´ canvas');
      return;
    }
    
    // X√°c ƒë·ªãnh k√≠ch th∆∞·ªõc canvas
    canvas.style.width = '100%';
    canvas.style.height = '100%';
    canvas.style.display = 'block';
    
    // Bu·ªôc c·∫≠p nh·∫≠t k√≠ch th∆∞·ªõc th·ª±c t·∫ø c·ªßa canvas
    const parent = canvas.parentElement;
    if (parent) {
      const parentWidth = parent.offsetWidth;
      canvas.width = parentWidth || 300;
      canvas.height = 300;
      console.log("ƒê√£ thi·∫øt l·∫≠p k√≠ch th∆∞·ªõc canvas danh m·ª•c:", canvas.width, "x", canvas.height);
    }
    
    // X√≥a bi·ªÉu ƒë·ªì c≈© n·∫øu c√≥
    if (currentCharts.categoryChart) {
      console.log('X√≥a bi·ªÉu ƒë·ªì danh m·ª•c c≈©');
      currentCharts.categoryChart.destroy();
      currentCharts.categoryChart = null;
    }
  
    // Ki·ªÉm tra darkmode
    const isDarkMode = document.documentElement.getAttribute('data-theme') === 'dark';
    
    // T·∫°o d·ªØ li·ªáu cho bi·ªÉu ƒë·ªì
    const chartData = categoryData.map(item => ({
      name: item.name,
      value: item.value,
      color: CONFIG.categories[item.name]?.color || CONFIG.colors.info
    }));
    
    console.log("D·ªØ li·ªáu bi·ªÉu ƒë·ªì danh m·ª•c:", chartData);
    
    // Ki·ªÉm tra d·ªØ li·ªáu
    if (!chartData || chartData.length === 0) {
      console.warn('Kh√¥ng c√≥ d·ªØ li·ªáu ƒë·ªÉ hi·ªÉn th·ªã bi·ªÉu ƒë·ªì danh m·ª•c');
      return;
    }
    
    // Chu·∫©n b·ªã d·ªØ li·ªáu cho bi·ªÉu ƒë·ªì
    const colors = chartData.map(item => item.color + (isDarkMode ? 'CC' : '99')); // Th√™m opacity kh√°c nhau theo ch·∫ø ƒë·ªô
    const borderColors = chartData.map(item => item.color);
    
    // C·∫•u h√¨nh m√†u s·∫Øc theo ch·∫ø ƒë·ªô s√°ng/t·ªëi
    const tooltipBgColor = isDarkMode ? 'rgba(15, 23, 42, 0.9)' : 'rgba(30, 41, 59, 0.9)';
    const tooltipTextColor = isDarkMode ? '#f8fafc' : '#f8fafc';
    const legendTextColor = isDarkMode ? '#cbd5e1' : '#64748b';
    
    // Thi·∫øt l·∫≠p c·∫•u h√¨nh bi·ªÉu ƒë·ªì
    const chartConfig = {
      type: 'doughnut',
      data: {
        labels: chartData.map(item => item.name),
        datasets: [{
          data: chartData.map(item => item.value),
          backgroundColor: colors,
          borderColor: borderColors,
          borderWidth: 2,
          hoverOffset: 10,
          borderRadius: 4,
          spacing: 2
        }]
      },
      options: {
        responsive: true,
        maintainAspectRatio: false,
        cutout: '70%',
        radius: '90%',
        plugins: {
          legend: {
            display: false
          },
          tooltip: {
            backgroundColor: tooltipBgColor,
            titleColor: tooltipTextColor,
            bodyColor: tooltipTextColor,
            titleFont: {
              size: 14,
              weight: 'bold',
              family: "'Inter', sans-serif"
            },
            bodyFont: {
              size: 13,
              family: "'Inter', sans-serif"
            },
            padding: 12,
            cornerRadius: 8,
            displayColors: true,
            boxWidth: 10,
            boxHeight: 10,
            boxPadding: 3,
            usePointStyle: true,
            callbacks: {
              label: function(context) {
                const value = context.raw;
                const total = context.dataset.data.reduce((acc, val) => acc + val, 0);
                const percentage = ((value / total) * 100).toFixed(1);
                return `${context.label}: ${formatCurrency(value)} (${percentage}%)`;
              }
            }
          }
        },
        animation: {
          animateRotate: true,
          animateScale: true,
          duration: 1000,
          easing: 'easeOutQuart'
        },
        layout: {
          padding: 20
        },
        elements: {
          arc: {
            borderWidth: 2
          }
        }
      }
    };
    
    // T·∫°o bi·ªÉu ƒë·ªì m·ªõi
    try {
      console.log("ƒêang t·∫°o bi·ªÉu ƒë·ªì danh m·ª•c m·ªõi...");
      
      currentCharts.categoryChart = new Chart(ctx, chartConfig);
      
      console.log("ƒê√£ t·∫°o bi·ªÉu ƒë·ªì danh m·ª•c th√†nh c√¥ng");
      
      // Hi·ªÉn th·ªã ch√∫ th√≠ch danh m·ª•c
      renderCategoryLegendWithIcons(chartData);
      
      return currentCharts.categoryChart;
    } catch (chartError) {
      console.error("L·ªói khi t·∫°o bi·ªÉu ƒë·ªì danh m·ª•c:", chartError);
      throw chartError;
    }
  } catch (error) {
    console.error('L·ªói khi t·∫°o bi·ªÉu ƒë·ªì danh m·ª•c:', error);
    throw error;
  }
}

// Hi·ªÉn th·ªã ch√∫ th√≠ch cho bi·ªÉu ƒë·ªì danh m·ª•c v·ªõi bi·ªÉu t∆∞·ª£ng m√†u s·∫Øc
function renderCategoryLegendWithIcons(chartData) {
  try {
    console.log("ƒêang t·∫°o ch√∫ th√≠ch cho bi·ªÉu ƒë·ªì danh m·ª•c");
    
    // L·∫•y th·∫ª ch·ª©a legend
    const legendContainer = document.getElementById('category-legend');
    if (!legendContainer) {
      console.error('Kh√¥ng t√¨m th·∫•y container cho ch√∫ th√≠ch');
      return;
    }
    
    // X√≥a n·ªôi dung c≈©
    legendContainer.innerHTML = '';
    
    // Ki·ªÉm tra darkmode
    const isDarkMode = document.documentElement.getAttribute('data-theme') === 'dark';
    
    // S·∫Øp x·∫øp d·ªØ li·ªáu theo gi√° tr·ªã gi·∫£m d·∫ßn
    const sortedData = [...chartData].sort((a, b) => b.value - a.value);
    
    // T√≠nh t·ªïng chi ph√≠
    const totalAmount = sortedData.reduce((total, item) => total + item.value, 0);
    
    // T·∫°o c√°c m·ª•c c·ªßa legend
    sortedData.forEach(item => {
      // T√≠nh ph·∫ßn trƒÉm
      const percentage = totalAmount > 0 ? (item.value / totalAmount * 100).toFixed(1) : '0.0';
      
      // T·∫°o element m·ªõi
      const legendItem = document.createElement('div');
      legendItem.className = 'reports-legend-item';
      
      // Hi·ªáu ·ª©ng hover v√† focus
      legendItem.innerHTML = `
        <div class="reports-legend-color" style="background-color: ${item.color};"></div>
        <div class="reports-legend-text">
          <span class="reports-legend-label">${item.name}</span>
          <div class="reports-legend-details">
            <span class="reports-legend-value">${formatCurrency(item.value)}</span>
            <span class="reports-legend-percentage">${percentage}%</span>
          </div>
        </div>
      `;
      
      // Khi hover v√†o legend item, highlight item t∆∞∆°ng ·ª©ng tr√™n bi·ªÉu ƒë·ªì
      legendItem.addEventListener('mouseenter', () => {
        if (currentCharts.categoryChart) {
          // T√¨m ch·ªâ s·ªë c·ªßa d·ªØ li·ªáu
          const index = sortedData.findIndex(d => d.name === item.name);
          
          // Highlight item trong bi·ªÉu ƒë·ªì
          const meta = currentCharts.categoryChart.getDatasetMeta(0);
          meta.data.forEach((segment, i) => {
            segment.options.hoverOffset = i === index ? 15 : 0;
          });
          
          // C·∫≠p nh·∫≠t bi·ªÉu ƒë·ªì
          currentCharts.categoryChart.update();
          
          // √Åp d·ª•ng style cho legend item
          legendItem.classList.add('active');
        }
      });
      
      // Khi di chu·ªôt ra kh·ªèi legend item
      legendItem.addEventListener('mouseleave', () => {
        if (currentCharts.categoryChart) {
          // Reset highlight
          const meta = currentCharts.categoryChart.getDatasetMeta(0);
          meta.data.forEach(segment => {
            segment.options.hoverOffset = 10;
          });
          
          // C·∫≠p nh·∫≠t bi·ªÉu ƒë·ªì
          currentCharts.categoryChart.update();
          
          // √Åp d·ª•ng style cho legend item
          legendItem.classList.remove('active');
        }
      });
      
      legendContainer.appendChild(legendItem);
    });
    
    console.log("ƒê√£ t·∫°o xong ch√∫ th√≠ch cho bi·ªÉu ƒë·ªì danh m·ª•c");
  } catch (error) {
    console.error('L·ªói khi t·∫°o ch√∫ th√≠ch bi·ªÉu ƒë·ªì:', error);
  }
}

// Render b·∫£ng d·ªØ li·ªáu theo danh m·ª•c
function renderCategoryTable(categoryData) {
  const tableBody = document.querySelector('#category-table tbody');
  if (!tableBody) {
    console.warn('Kh√¥ng t√¨m th·∫•y ph·∫ßn t·ª≠ #category-table tbody');
    return;
  }
  
  tableBody.innerHTML = '';
  
  categoryData.forEach(item => {
    const row = document.createElement('tr');
    
    row.innerHTML = `
      <td>${item.name}</td>
      <td>${formatCurrency(item.value)}</td>
      <td>
        <div class="cell-value">${item.percentage}%</div>
        <div class="progress-bar-container">
          <div class="progress-bar" style="width: ${item.percentage}%"></div>
        </div>
      </td>
    `;
    
    tableBody.appendChild(row);
  });
}

// Render bi·ªÉu ƒë·ªì so s√°nh
async function renderComparisonChart(comparisonData) {
  if (!comparisonData || comparisonData.length < 2) {
    console.warn('Kh√¥ng ƒë·ªß d·ªØ li·ªáu ƒë·ªÉ hi·ªÉn th·ªã bi·ªÉu ƒë·ªì so s√°nh');
    return;
  }
  
  const canvas = document.getElementById('comparison-chart');
  if (!canvas) {
    console.warn('Kh√¥ng t√¨m th·∫•y canvas cho bi·ªÉu ƒë·ªì so s√°nh');
    return;
  }
  
  const ctx = canvas.getContext('2d');
  
  // Chu·∫©n b·ªã d·ªØ li·ªáu bi·ªÉu ƒë·ªì
  const labels = comparisonData.map(item => item.period);
  const amounts = comparisonData.map(item => item.amount);
  
  // T·∫°o gradient
  const gradient = ctx.createLinearGradient(0, 0, 0, 400);
  gradient.addColorStop(0, 'rgba(99, 102, 241, 0.5)');
  gradient.addColorStop(1, 'rgba(99, 102, 241, 0.0)');
  
  // H·ªßy bi·ªÉu ƒë·ªì hi·ªán t·∫°i n·∫øu c√≥
  if (currentCharts.comparisonChart) {
    currentCharts.comparisonChart.destroy();
  }
  
  // T·∫°o bi·ªÉu ƒë·ªì m·ªõi
  currentCharts.comparisonChart = new Chart(ctx, {
    type: 'line',
    data: {
      labels: labels,
      datasets: [{
        label: 'Chi ph√≠',
        data: amounts,
        borderColor: '#6366f1',
        borderWidth: 3,
        pointBackgroundColor: '#6366f1',
        pointBorderColor: '#fff',
        pointBorderWidth: 2,
        pointRadius: 5,
        pointHoverRadius: 7,
        tension: 0.3,
        fill: true,
        backgroundColor: gradient
      }]
    },
    options: {
      responsive: true,
      maintainAspectRatio: false,
      plugins: {
        legend: {
          display: false
        },
        tooltip: {
          backgroundColor: 'rgba(17, 24, 39, 0.9)',
          titleFont: {
            size: 14,
            weight: 'bold'
          },
          bodyFont: {
            size: 13
          },
          padding: 12,
          displayColors: false,
          callbacks: {
            label: function(context) {
              return `Chi ph√≠: ${formatCurrency(context.parsed.y)}`;
            }
          }
        }
      },
      scales: {
        x: {
          grid: {
            color: 'rgba(156, 163, 175, 0.1)'
          },
          ticks: {
            color: document.body.getAttribute('data-theme') === 'dark' ? '#cbd5e1' : '#64748b'
          }
        },
        y: {
          grid: {
            color: 'rgba(156, 163, 175, 0.1)'
          },
          ticks: {
            color: document.body.getAttribute('data-theme') === 'dark' ? '#cbd5e1' : '#64748b',
            callback: function(value) {
              return formatCurrency(value);
            }
          }
        }
      }
    }
  });
}

// Render b·∫£ng d·ªØ li·ªáu so s√°nh
function renderComparisonTable(comparisonData) {
  const tableBody = document.querySelector('#comparison-table tbody');
  if (!tableBody) {
    console.warn('Kh√¥ng t√¨m th·∫•y ph·∫ßn t·ª≠ #comparison-table tbody');
    return;
  }
  
  tableBody.innerHTML = '';
  
  comparisonData.forEach((item, index) => {
    if (index > 0) {
      const row = document.createElement('tr');
      
      // T√≠nh ph·∫ßn trƒÉm thay ƒë·ªïi so v·ªõi k·ª≥ tr∆∞·ªõc
      const previousAmount = comparisonData[index - 1].amount;
      const currentAmount = item.amount;
      const change = previousAmount ? ((currentAmount - previousAmount) / previousAmount) * 100 : 0;
      
      const changeClass = change > 0 ? 'positive-change' : 'negative-change';
      const changeIcon = change > 0 ? 'bi-arrow-up-right' : 'bi-arrow-down-right';
      const changeText = `${Math.abs(change).toFixed(1)}%`;
      
      row.innerHTML = `
        <td>${item.period}</td>
        <td>${formatCurrency(item.amount)}</td>
        <td class="${changeClass}">
          <i class="bi ${changeIcon}"></i> ${changeText}
        </td>
      `;
      
      tableBody.appendChild(row);
    }
  });
}

// Render bi·ªÉu ƒë·ªì theo th·ªùi gian v·ªõi hi·ªáu ·ª©ng
async function renderTimeChartWithAnimation(expenses) {
  try {
    console.log("B·∫Øt ƒë·∫ßu renderTimeChartWithAnimation v·ªõi", expenses.length, "chi ph√≠");
    
    // Ki·ªÉm tra d·ªØ li·ªáu
    if (!expenses || !Array.isArray(expenses) || expenses.length === 0) {
      console.warn('Kh√¥ng c√≥ d·ªØ li·ªáu chi ph√≠ ƒë·ªÉ hi·ªÉn th·ªã bi·ªÉu ƒë·ªì');
      return;
    }
    
    // T√¨m ph·∫ßn t·ª≠ container cho bi·ªÉu ƒë·ªì th·ªùi gian
    const chartContainer = document.querySelector('.reports-chart-wrapper');
    if (!chartContainer) {
      console.warn('Kh√¥ng t√¨m th·∫•y .reports-chart-wrapper');
      return;
    }
    
    // X√≥a n·ªôi dung hi·ªán t·∫°i v√† t·∫°o canvas m·ªõi
    chartContainer.innerHTML = '';
    const canvas = document.createElement('canvas');
    canvas.id = 'time-chart';
    canvas.style.width = '100%';
    canvas.style.height = '100%';
    canvas.style.display = 'block';
    chartContainer.appendChild(canvas);
    
    // ƒê·∫£m b·∫£o container c√≥ style ƒë√∫ng
    chartContainer.style.display = 'block';
    chartContainer.style.position = 'relative';
    chartContainer.style.width = '100%';
    chartContainer.style.height = '300px';
    chartContainer.style.minHeight = '300px';
    
    // Hi·ªÉn th·ªã loading
    chartContainer.classList.add('loading');
    
    try {
      // Nh√≥m d·ªØ li·ªáu theo th·ªùi gian
      const groupedData = groupByTime(expenses, currentTimeRange);
      
      // Ki·ªÉm tra n·∫øu kh√¥ng c√≥ d·ªØ li·ªáu
      if (!groupedData || groupedData.length === 0) {
        console.warn('Kh√¥ng c√≥ d·ªØ li·ªáu ƒë·ªÉ hi·ªÉn th·ªã bi·ªÉu ƒë·ªì!');
        chartContainer.classList.remove('loading');
        return;
      }
      
      // Chu·∫©n b·ªã d·ªØ li·ªáu cho bi·ªÉu ƒë·ªì
      const labels = groupedData.map(item => item.label);
      const data = groupedData.map(item => item.total);
      
      // Ki·ªÉm tra Chart.js ƒë√£ ƒë∆∞·ª£c t·∫£i
      if (typeof Chart === 'undefined') {
        throw new Error('Th∆∞ vi·ªán Chart.js ch∆∞a ƒë∆∞·ª£c t·∫£i');
      }
      
      // L·∫•y context cho canvas
      const ctx = canvas.getContext('2d');
      if (!ctx) {
        throw new Error('Kh√¥ng th·ªÉ l·∫•y context t·ª´ canvas');
      }
      
      // Thi·∫øt l·∫≠p k√≠ch th∆∞·ªõc canvas
      const parentWidth = chartContainer.offsetWidth || 600;
      canvas.width = parentWidth;
      canvas.height = 300;
      console.log(`Canvas k√≠ch th∆∞·ªõc: ${canvas.width} x ${canvas.height}`);
      
      // T·∫°o gradient
      const gradient = ctx.createLinearGradient(0, 0, 0, canvas.height);
      gradient.addColorStop(0, 'rgba(99, 102, 241, 0.5)');
      gradient.addColorStop(1, 'rgba(99, 102, 241, 0.0)');
      
      // X√≥a bi·ªÉu ƒë·ªì c≈© n·∫øu c√≥
      if (currentCharts.timeChart) {
        currentCharts.timeChart.destroy();
        currentCharts.timeChart = null;
      }
      
      // C·∫•u h√¨nh bi·ªÉu ƒë·ªì
      const chartConfig = {
        type: 'line',
        data: {
          labels: labels,
          datasets: [{
            label: 'Chi ph√≠',
            data: data,
            borderColor: '#6366f1',
            borderWidth: 3,
            pointBackgroundColor: '#6366f1',
            pointBorderColor: '#fff',
            pointBorderWidth: 2,
            pointRadius: 5,
            pointHoverRadius: 7,
            tension: 0.3,
            fill: true,
            backgroundColor: gradient
          }]
        },
        options: {
          responsive: true,
          maintainAspectRatio: false,
          plugins: {
            legend: {
              display: false
            },
            tooltip: {
              backgroundColor: 'rgba(17, 24, 39, 0.9)',
              titleFont: {
                size: 14,
                weight: 'bold'
              },
              bodyFont: {
                size: 13
              },
              padding: 12,
              displayColors: false,
              callbacks: {
                label: function(context) {
                  return `Chi ph√≠: ${formatCurrency(context.parsed.y)}`;
                }
              }
            }
          },
          scales: {
            x: {
              grid: {
                color: 'rgba(255, 255, 255, 0.1)'
              },
              ticks: {
                color: '#9ca3af'
              }
            },
            y: {
              grid: {
                color: 'rgba(255, 255, 255, 0.1)'
              },
              ticks: {
                color: '#9ca3af',
                callback: function(value) {
                  if (value >= 1000000) {
                    return (value / 1000000).toFixed(1) + 'M';
                  } else if (value >= 1000) {
                    return (value / 1000).toFixed(0) + 'K';
                  }
                  return value;
                }
              }
            }
          },
          animation: {
            duration: 1000,
            easing: 'easeOutQuart'
          }
        }
      };
      
      // T·∫°o bi·ªÉu ƒë·ªì m·ªõi
      console.log("Kh·ªüi t·∫°o bi·ªÉu ƒë·ªì m·ªõi Line Chart");
      currentCharts.timeChart = new Chart(ctx, chartConfig);
      
      // L∆∞u bi·ªÉu ƒë·ªì trong window object
      window.timeChart = currentCharts.timeChart;
      
      console.log("ƒê√£ t·∫°o bi·ªÉu ƒë·ªì th√†nh c√¥ng:", currentCharts.timeChart?.id);
    } catch (error) {
      console.error('L·ªói khi t·∫°o bi·ªÉu ƒë·ªì:', error);
      throw error;
    } finally {
      // ·∫®n loading
      chartContainer.classList.remove('loading');
    }
  } catch (error) {
    console.error('L·ªói trong renderTimeChartWithAnimation:', error);
    throw error;
  }
}

// S·ª≠a h√†m bu·ªôc v·∫Ω l·∫°i bi·ªÉu ƒë·ªì
function forceRerenderChart() {
  try {
    console.log("ƒêang bu·ªôc v·∫Ω l·∫°i bi·ªÉu ƒë·ªì th·ªùi gian...");
    
    // Ki·ªÉm tra xem bi·ªÉu ƒë·ªì ƒë√£ ƒë∆∞·ª£c t·∫°o ch∆∞a
    if (!currentCharts.timeChart) {
      // Ki·ªÉm tra xem c√≥ bi·ªÉu ƒë·ªì ƒë∆∞·ª£c l∆∞u trong window kh√¥ng
      if (window.timeChart) {
        console.log("Ph·ª•c h·ªìi bi·ªÉu ƒë·ªì t·ª´ window.timeChart");
        currentCharts.timeChart = window.timeChart;
      } else {
        console.warn("Bi·ªÉu ƒë·ªì ch∆∞a ƒë∆∞·ª£c t·∫°o, s·∫Ω t·∫°o l·∫°i t·ª´ ƒë·∫ßu");
        
        // Ki·ªÉm tra d·ªØ li·ªáu hi·ªán t·∫°i
        if (userData && userData.id) {
          loadTimeReport(userData.id);
        }
        return;
      }
    }
    
    // Ki·ªÉm tra xem canvas c√≥ t·ªìn t·∫°i kh√¥ng
    const canvas = document.getElementById('time-chart');
    if (!canvas) {
      console.warn("Kh√¥ng t√¨m th·∫•y canvas, kh√¥ng th·ªÉ v·∫Ω l·∫°i bi·ªÉu ƒë·ªì");
      return;
    }
    
    // Ki·ªÉm tra xem chart object c√≥ h·ª£p l·ªá kh√¥ng
    if (typeof currentCharts.timeChart.update !== 'function') {
      console.warn("ƒê·ªëi t∆∞·ª£ng bi·ªÉu ƒë·ªì kh√¥ng h·ª£p l·ªá, s·∫Ω t·∫°o l·∫°i t·ª´ ƒë·∫ßu");
      if (userData && userData.id) {
        loadTimeReport(userData.id);
      }
      return;
    }
    
    // C·∫≠p nh·∫≠t k√≠ch th∆∞·ªõc canvas
    const container = canvas.parentElement;
    if (container) {
      // Thi·∫øt l·∫≠p k√≠ch th∆∞·ªõc r√µ r√†ng
      container.style.height = "300px";
      container.style.width = "100%";
      container.style.position = "relative";
      container.style.display = "block";
      
      canvas.style.width = "100%";
      canvas.style.height = "100%";
      canvas.style.display = "block";
      
      // L·∫•y k√≠ch th∆∞·ªõc container
      const containerWidth = container.offsetWidth;
      
      // C·∫≠p nh·∫≠t k√≠ch th∆∞·ªõc canvas
      canvas.width = containerWidth;
      canvas.height = 300;
      
      console.log("ƒê√£ c·∫≠p nh·∫≠t k√≠ch th∆∞·ªõc canvas:", canvas.width, "x", canvas.height);
    }
    
    // Bu·ªôc v·∫Ω l·∫°i bi·ªÉu ƒë·ªì
    currentCharts.timeChart.update();
    console.log("ƒê√£ bu·ªôc v·∫Ω l·∫°i bi·ªÉu ƒë·ªì");
    
  } catch (error) {
    console.error("L·ªói khi bu·ªôc v·∫Ω l·∫°i bi·ªÉu ƒë·ªì:", error);
  }
}

// Render b·∫£ng d·ªØ li·ªáu theo th·ªùi gian v·ªõi hi·ªáu ·ª©ng loading
async function renderTimeTableWithAnimation(expenses, averageExpense) {
  try {
    console.log("B·∫Øt ƒë·∫ßu renderTimeTableWithAnimation v·ªõi", expenses.length, "chi ph√≠");
    
    // T√¨m ph·∫ßn t·ª≠ container cho b·∫£ng
    const tableContainer = document.querySelector('.reports-table-container');
    if (!tableContainer) {
      console.warn('Kh√¥ng t√¨m th·∫•y .reports-table-container');
      hideLoading();
      return;
    }
    
    // T√¨m ph·∫ßn t·ª≠ tbody c·ªßa b·∫£ng
    const tableBody = document.querySelector('#time-table tbody');
    if (!tableBody) {
      console.warn('Kh√¥ng t√¨m th·∫•y #time-table tbody');
      hideLoading();
      return;
    }
    
    // Ki·ªÉm tra x√°c nh·∫≠n d·ªØ li·ªáu ƒë·∫ßu v√†o
    console.log("Average expense:", averageExpense);
    console.log("Sample expense:", expenses[0]);
    
    // Th√™m hi·ªáu ·ª©ng loading
    tableContainer.classList.add('loading');
    
    // ƒê·ª£i m·ªôt kho·∫£ng th·ªùi gian ng·∫Øn ƒë·ªÉ hi·ªáu ·ª©ng loading hi·ªÉn th·ªã
    setTimeout(() => {
      try {
        console.log("ƒêang g·ªçi h√†m renderTimeTable trong setTimeout");
        // Render b·∫£ng d·ªØ li·ªáu
        renderTimeTable(expenses, averageExpense);
        
        // X√≥a hi·ªáu ·ª©ng loading
        tableContainer.classList.remove('loading');
        console.log("ƒê√£ ho√†n th√†nh render b·∫£ng th·ªùi gian");
      } catch (error) {
        console.error('L·ªói khi render b·∫£ng th·ªùi gian:', error);
        console.error('Chi ti·∫øt l·ªói:', error.message, error.stack);
        hideLoading();
        showError('Kh√¥ng th·ªÉ t·∫°o b·∫£ng d·ªØ li·ªáu th·ªùi gian');
      }
    }, 300);
  } catch (error) {
    console.error('L·ªói trong renderTimeTableWithAnimation:', error);
    console.error('Chi ti·∫øt l·ªói:', error.message, error.stack);
    hideLoading();
  }
}

// Kh·ªüi t·∫°o tooltip cho c√°c con s·ªë
function initializeTooltips() {
  try {
    // X√≥a tooltip c≈© n·∫øu c√≥
    const existingTooltips = document.querySelectorAll('.tooltip');
    existingTooltips.forEach(tooltip => {
      if (tooltip.parentNode) {
        tooltip.parentNode.removeChild(tooltip);
      }
    });
    
    // Kh·ªüi t·∫°o tooltip m·ªõi
    if (typeof bootstrap !== 'undefined' && bootstrap.Tooltip) {
      const tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'));
      tooltipTriggerList.map(function (tooltipTriggerEl) {
        return new bootstrap.Tooltip(tooltipTriggerEl);
      });
      console.log('ƒê√£ kh·ªüi t·∫°o', tooltipTriggerList.length, 'tooltips');
    } else {
      console.warn('Bootstrap Tooltip kh√¥ng kh·∫£ d·ª•ng');
    }
  } catch (error) {
    console.error('L·ªói khi kh·ªüi t·∫°o tooltips:', error);
  }
}

// T·∫°o m√†u ng·∫´u nhi√™n cho bi·ªÉu ƒë·ªì
function generateColors(count) {
  const baseColors = [
    'rgba(54, 162, 235, 0.7)',
    'rgba(255, 99, 132, 0.7)',
    'rgba(255, 206, 86, 0.7)',
    'rgba(75, 192, 192, 0.7)',
    'rgba(153, 102, 255, 0.7)',
    'rgba(255, 159, 64, 0.7)',
    'rgba(199, 199, 199, 0.7)',
    'rgba(83, 102, 255, 0.7)',
    'rgba(40, 167, 69, 0.7)',
    'rgba(220, 53, 69, 0.7)'
  ];
  
  const colors = [];
  
  for (let i = 0; i < count; i++) {
    colors.push(baseColors[i % baseColors.length]);
  }
  
  return colors;
}

// T·∫°o d·ªØ li·ªáu demo cho bi·ªÉu ƒë·ªì so s√°nh
function generateDemoComparisonData() {
  let data = [];
  const now = new Date();
  
  if (currentComparisonType === 'month') {
    // So s√°nh 6 th√°ng g·∫ßn nh·∫•t
    for (let i = 5; i >= 0; i--) {
      const month = new Date(now.getFullYear(), now.getMonth() - i, 1);
      data.push({
        period: `Th√°ng ${month.getMonth() + 1}/${month.getFullYear()}`,
        amount: Math.floor(Math.random() * 20000000) + 5000000
      });
    }
  } else if (currentComparisonType === 'quarter') {
    // So s√°nh 4 qu√Ω g·∫ßn nh·∫•t
    const currentQuarter = Math.floor(now.getMonth() / 3);
    
    for (let i = 3; i >= 0; i--) {
      const quarter = (currentQuarter - i + 4) % 4 + 1;
      const year = now.getFullYear() - Math.floor((i - currentQuarter) / 4);
      
      data.push({
        period: `Qu√Ω ${quarter}/${year}`,
        amount: Math.floor(Math.random() * 50000000) + 10000000
      });
    }
  } else {
    // So s√°nh 3 nƒÉm g·∫ßn nh·∫•t
    for (let i = 2; i >= 0; i--) {
      const year = now.getFullYear() - i;
      
      data.push({
        period: `${year}`,
        amount: Math.floor(Math.random() * 200000000) + 50000000
      });
    }
  }
  
  return data;
}

// Xu·∫•t b√°o c√°o
async function exportReport(reportType, format) {
  try {
    // Ch·ªâ h·ªó tr·ª£ xu·∫•t PDF cho b√°o c√°o chi ti·∫øt
    if (reportType !== 'detail') {
      showNotification('Ch·ª©c nƒÉng xu·∫•t b√°o c√°o hi·ªán ch·ªâ h·ªó tr·ª£ cho b√°o c√°o chi ti·∫øt chi ph√≠.', 'info');
      return;
    }
    
    if (format !== 'pdf') {
      showNotification('Hi·ªán t·∫°i ch·ªâ h·ªó tr·ª£ xu·∫•t ƒë·ªãnh d·∫°ng PDF.', 'info');
      return;
    }
    
    showLoading();
    
    // Chu·∫©n b·ªã d·ªØ li·ªáu ƒë·ªÉ xu·∫•t
    const data = await prepareExportData(reportType);
    
    await exportToPDF(data, reportType);
    
    showSuccess('Xu·∫•t b√°o c√°o th√†nh c√¥ng');
  } catch (error) {
    console.error('L·ªói xu·∫•t b√°o c√°o:', error);
    showError('Kh√¥ng th·ªÉ xu·∫•t b√°o c√°o. Vui l√≤ng th·ª≠ l·∫°i.');
  } finally {
    hideLoading();
  }
}

// Chu·∫©n b·ªã d·ªØ li·ªáu xu·∫•t b√°o c√°o
async function prepareExportData(reportType) {
  const data = {
    title: '',
    summary: {},
    details: [],
    dateRange: getCurrentDateRange(),
    generatedAt: new Date().toLocaleString('vi-VN')
  };
  
  switch (reportType) {
    case 'time':
      data.title = 'B√°o C√°o Chi Ph√≠ Theo Th·ªùi Gian';
      data.details = await getTimeReportData();
      break;
    case 'category':
      data.title = 'B√°o C√°o Chi Ph√≠ Theo Danh M·ª•c';
      data.details = await getCategoryReportData();
      break;
    case 'comparison':
      data.title = 'B√°o C√°o So S√°nh Chi Ph√≠';
      data.details = await getComparisonReportData();
      break;
    case 'detail':
      data.title = 'Chi Ti·∫øt Chi Ph√≠';
      // L·∫•y d·ªØ li·ªáu chi ti·∫øt hi·ªán t·∫°i t·ª´ b·∫£ng chi ti·∫øt
      data.details = currentDetailData || [];
      break;
  }
  
  return data;
}

// Xu·∫•t ra PDF
async function exportToPDF(data, reportType) {
  try {
    // Ki·ªÉm tra n·∫øu html2pdf ch∆∞a ƒë∆∞·ª£c t·∫£i
    if (typeof html2pdf === 'undefined') {
      console.log('ƒêang t·∫£i html2pdf.js...');
      await loadHTML2PDF();
    }

    // T·∫°o template PDF d·ª±a tr√™n lo·∫°i b√°o c√°o
    const template = await generatePDFTemplate(data, reportType);
    
    // T·∫°o PDF t·ª´ template v√† l∆∞u file
    return html2pdf()
      .set({
        margin: [10, 10, 10, 10],
        filename: `bao-cao-${reportType}-${formatDate(new Date())}.pdf`,
        image: { type: 'jpeg', quality: 0.98 },
        html2canvas: { scale: 2, useCORS: true },
        jsPDF: { unit: 'mm', format: 'a4', orientation: 'portrait' }
      })
      .from(template)
      .save();
  } catch (error) {
    console.error('L·ªói khi xu·∫•t PDF:', error);
    throw error;
  }
}

// Xu·∫•t ra Excel
async function exportToExcel(data, reportType) {
  try {
    // Ki·ªÉm tra n·∫øu XLSX ch∆∞a ƒë∆∞·ª£c t·∫£i
    if (typeof XLSX === 'undefined') {
      console.log('ƒêang t·∫£i XLSX.js...');
      await new Promise((resolve, reject) => {
        const script = document.createElement('script');
        script.src = 'https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.18.5/xlsx.full.min.js';
        script.onload = resolve;
        script.onerror = () => reject(new Error('Kh√¥ng th·ªÉ t·∫£i XLSX.js'));
        document.head.appendChild(script);
      });
      console.log('ƒê√£ t·∫£i XLSX.js th√†nh c√¥ng');
    }

    const wb = XLSX.utils.book_new();
    
    // T·∫°o worksheet d·ª±a tr√™n lo·∫°i b√°o c√°o
    const ws = generateExcelWorksheet(data, reportType);
    
    XLSX.utils.book_append_sheet(wb, ws, 'B√°o c√°o');
    XLSX.writeFile(wb, `bao-cao-${reportType}-${formatDate(new Date())}.xlsx`);
  } catch (error) {
    console.error('L·ªói khi xu·∫•t Excel:', error);
    throw error;
  }
}

// T·∫°o worksheet Excel d·ª±a tr√™n lo·∫°i b√°o c√°o
function generateExcelWorksheet(data, reportType) {
  console.log('T·∫°o worksheet Excel cho b√°o c√°o:', reportType);
  
  // M·∫£ng ch·ª©a d·ªØ li·ªáu cho Excel
  let excelData = [];
  
  // Thi·∫øt l·∫≠p ti√™u ƒë·ªÅ v√† header d·ª±a tr√™n lo·∫°i b√°o c√°o
  switch (reportType) {
    case 'time':
      // Ti√™u ƒë·ªÅ b√°o c√°o
      excelData.push([data.title]);
      excelData.push([`T·ª´ ${data.dateRange.start} ƒë·∫øn ${data.dateRange.end}`]);
      excelData.push([`T·∫°o l√∫c: ${data.generatedAt}`]);
      excelData.push([]);  // D√≤ng tr·ªëng
      
      // Header b·∫£ng
      excelData.push(['Th·ªùi gian', 'Chi ph√≠', 'S·ªë l∆∞·ª£ng giao d·ªãch']);
      
      // D·ªØ li·ªáu
      data.details.forEach(item => {
        excelData.push([
          item.period,
          item.amount,
          item.count
        ]);
      });
      
      // T·ªïng c·ªông
      const totalAmount = data.details.reduce((sum, item) => sum + item.amount, 0);
      const totalCount = data.details.reduce((sum, item) => sum + item.count, 0);
      excelData.push(['T·ªïng c·ªông', totalAmount, totalCount]);
      break;
      
    case 'category':
      // Ti√™u ƒë·ªÅ b√°o c√°o
      excelData.push([data.title]);
      excelData.push([`T·ª´ ${data.dateRange.start} ƒë·∫øn ${data.dateRange.end}`]);
      excelData.push([`T·∫°o l√∫c: ${data.generatedAt}`]);
      excelData.push([]);  // D√≤ng tr·ªëng
      
      // Header b·∫£ng
      excelData.push(['Danh m·ª•c', 'Chi ph√≠', 'T·ª∑ l·ªá (%)', 'S·ªë l∆∞·ª£ng giao d·ªãch']);
      
      // D·ªØ li·ªáu
      data.details.forEach(item => {
        excelData.push([
          item.category,
          item.amount,
          item.percentage,
          item.count
        ]);
      });
      
      // T·ªïng c·ªông
      const catTotalAmount = data.details.reduce((sum, item) => sum + item.amount, 0);
      const catTotalCount = data.details.reduce((sum, item) => sum + item.count, 0);
      excelData.push(['T·ªïng c·ªông', catTotalAmount, 100, catTotalCount]);
      break;
      
    case 'comparison':
      // Ti√™u ƒë·ªÅ b√°o c√°o
      excelData.push([data.title]);
      excelData.push([`T·ª´ ${data.dateRange.start} ƒë·∫øn ${data.dateRange.end}`]);
      excelData.push([`T·∫°o l√∫c: ${data.generatedAt}`]);
      excelData.push([]);  // D√≤ng tr·ªëng
      
      // Header b·∫£ng
      excelData.push(['Th·ªùi k·ª≥', 'Chi ph√≠', 'Thay ƒë·ªïi (%)']);
      
      // D·ªØ li·ªáu
      data.details.forEach(item => {
        excelData.push([
          item.period,
          item.amount,
          item.change || 0
        ]);
      });
      
      // T·ªïng c·ªông
      const compTotalAmount = data.details.reduce((sum, item) => sum + item.amount, 0);
      const avgChange = data.details.reduce((sum, item, index) => 
        index > 0 ? sum + (item.change || 0) : sum, 0) / (data.details.length > 1 ? data.details.length - 1 : 1);
      
      excelData.push(['T·ªïng c·ªông / Trung b√¨nh', compTotalAmount, Math.round(avgChange * 100) / 100]);
      break;
      
    default:
      excelData.push(['Kh√¥ng c√≥ d·ªØ li·ªáu cho lo·∫°i b√°o c√°o n√†y']);
  }
  
  // T·∫°o worksheet t·ª´ m·∫£ng d·ªØ li·ªáu
  const ws = XLSX.utils.aoa_to_sheet(excelData);
  
  // ƒê·ªãnh d·∫°ng cho worksheet
  const range = XLSX.utils.decode_range(ws['!ref']);
  
  // ƒê·ªãnh d·∫°ng chi·ªÅu r·ªông c·ªôt
  const cols = [];
  for (let i = 0; i <= range.e.c; i++) {
    cols.push({ wch: 20 });  // ƒê·ªô r·ªông chu·∫©n cho t·∫•t c·∫£ c·ªôt
  }
  ws['!cols'] = cols;
  
  return ws;
}

// Th√™m c√°c ti·ªán √≠ch
function formatDate(date) {
  return new Intl.DateTimeFormat('vi-VN', {
    year: 'numeric',
    month: '2-digit',
    day: '2-digit'
  }).format(date).split('/').join('-');
}

function getCurrentDateRange() {
  const now = new Date();
  let startDate, endDate;
  
  switch (currentTimeRange) {
    case 'month':
      startDate = new Date(now.getFullYear(), now.getMonth(), 1);
      endDate = new Date(now.getFullYear(), now.getMonth() + 1, 0);
      break;
    case 'quarter':
      const quarter = Math.floor(now.getMonth() / 3);
      startDate = new Date(now.getFullYear(), quarter * 3, 1);
      endDate = new Date(now.getFullYear(), (quarter + 1) * 3, 0);
      break;
    case 'year':
      startDate = new Date(now.getFullYear(), 0, 1);
      endDate = new Date(now.getFullYear(), 11, 31);
      break;
    default:
      startDate = document.getElementById('startDate')?.value || now;
      endDate = document.getElementById('endDate')?.value || now;
  }
  
  return {
    start: formatDate(startDate),
    end: formatDate(endDate)
  };
}

// L·∫•y kho·∫£ng th·ªùi gian t·ª´ b·ªô l·ªçc
function getDateRangeFromFilter() {
  const dateRange = getCurrentDateRange();
  
  // ƒê·ªãnh d·∫°ng l·∫°i ng√†y th√°ng cho ph√π h·ª£p v·ªõi Supabase (yyyy-MM-dd)
  const formatForSupabase = (dateStr) => {
    // Gi·∫£ s·ª≠ dateStr ƒëang ·ªü d·∫°ng dd-MM-yyyy
    const parts = dateStr.split('-');
    if (parts.length === 3) {
      // Chuy·ªÉn th√†nh yyyy-MM-dd
      return `${parts[2]}-${parts[1]}-${parts[0]}`;
    }
    return dateStr;
  };
  
  return {
    startDate: formatForSupabase(dateRange.start),
    endDate: formatForSupabase(dateRange.end)
  };
}

// H√†m debounce ƒë·ªÉ t·ªëi ∆∞u hi·ªáu su·∫•t
function debounce(func, wait) {
  let timeout;
  return function executedFunction(...args) {
    const later = () => {
      clearTimeout(timeout);
      func(...args);
    };
    clearTimeout(timeout);
    timeout = setTimeout(later, wait);
  };
}

// C√†i ƒë·∫∑t date range picker
function setupDateRangePicker() {
  const picker = document.getElementById('custom-date-range');
  if (picker) {
    new DateRangePicker(picker, {
      language: 'vi-VN',
      format: 'dd/mm/yyyy',
      maxDate: new Date(),
      clearButton: true,
      todayButton: true
    });
  }
}

// C√†i ƒë·∫∑t t∆∞∆°ng t√°c v·ªõi bi·ªÉu ƒë·ªì
function setupChartInteractions() {
  const charts = document.querySelectorAll('.report-chart');
  
  charts.forEach(chart => {
    // Th√™m n√∫t ph√≥ng to/thu nh·ªè
    const zoomBtn = document.createElement('button');
    zoomBtn.className = 'chart-zoom-btn';
    zoomBtn.innerHTML = '<i class="bi bi-arrows-fullscreen"></i>';
    chart.appendChild(zoomBtn);
    
    // X·ª≠ l√Ω s·ª± ki·ªán ph√≥ng to
    zoomBtn.addEventListener('click', () => {
      toggleChartFullscreen(chart);
    });
  });
}

// X·ª≠ l√Ω ph√≥ng to/thu nh·ªè bi·ªÉu ƒë·ªì
function toggleChartFullscreen(chart) {
  if (!document.fullscreenElement) {
    chart.requestFullscreen().catch(err => {
      showError('Kh√¥ng th·ªÉ m·ªü ch·∫ø ƒë·ªô to√†n m√†n h√¨nh');
    });
  } else {
    document.exitFullscreen();
  }
}

// Th√™m h√†m l·ªçc v√† t√¨m ki·∫øm
function setupSearchAndFilters() {
  const searchInput = document.getElementById('search-expenses');
  const filterStatus = document.getElementById('filter-status');
  const filterCategory = document.getElementById('filter-category');
  
  if (searchInput) {
    searchInput.addEventListener('input', debounce(() => {
      const searchTerm = searchInput.value.toLowerCase();
      filterExpenses(searchTerm, filterStatus?.value, filterCategory?.value);
    }, 300));
  }
  
  if (filterStatus) {
    filterStatus.addEventListener('change', () => {
      filterExpenses(searchInput?.value.toLowerCase(), filterStatus.value, filterCategory?.value);
    });
  }
  
  if (filterCategory) {
    filterCategory.addEventListener('change', () => {
      filterExpenses(searchInput?.value.toLowerCase(), filterStatus?.value, filterCategory.value);
    });
  }
}

// H√†m l·ªçc chi ph√≠
function filterExpenses(search = '', status = 'all', category = 'all') {
  const rows = document.querySelectorAll('.expense-row');
  let visibleCount = 0;
  
  rows.forEach(row => {
    const title = row.querySelector('.expense-title')?.textContent.toLowerCase() || '';
    const rowStatus = row.dataset.status;
    const rowCategory = row.dataset.category;
    
    const matchesSearch = !search || title.includes(search);
    const matchesStatus = status === 'all' || rowStatus === status;
    const matchesCategory = category === 'all' || rowCategory === category;
    
    if (matchesSearch && matchesStatus && matchesCategory) {
      row.style.display = '';
      visibleCount++;
    } else {
      row.style.display = 'none';
    }
  });
  
  updateFilterCounter(visibleCount, rows.length);
}

// C·∫≠p nh·∫≠t b·ªô ƒë·∫øm k·∫øt qu·∫£ l·ªçc
function updateFilterCounter(visible, total) {
  const counter = document.getElementById('filter-counter');
  if (counter) {
    counter.textContent = `Hi·ªÉn th·ªã ${visible}/${total} chi ph√≠`;
  }
}

// H√†m n·ªëi d·ª•ng ƒë·ªÉ t·∫£i d·ªØ li·ªáu chi ti√™u con
async function loadChildExpenses(parentId, token) {
  try {
    if (!parentId) {
      console.warn('Kh√¥ng c√≥ ID chi ti√™u cha ƒë·ªÉ t·∫£i chi ti√™u con');
      return [];
    }
    
    console.log('T·∫£i d·ªØ li·ªáu chi ti√™u con cho chi ti√™u ID:', parentId);
    
    // Ki·ªÉm tra supabase
    if (!window.supabase) {
      console.error('Supabase client ch∆∞a ƒë∆∞·ª£c kh·ªüi t·∫°o');
      return [];
    }
    
    // Truy v·∫•n d·ªØ li·ªáu chi ti√™u con - kh√¥ng s·ª≠ d·ª•ng .auth(token)
    const { data: childExpenses, error } = await window.supabase
      .from('child_expenses')
      .select('*')
      .eq('parent_id', parentId);
    
    if (error) {
      console.error('L·ªói khi t·∫£i chi ti√™u con:', error);
      return [];
    }
    
    console.log('ƒê√£ t·∫£i ƒë∆∞·ª£c', childExpenses?.length || 0, 'chi ti√™u con cho ID:', parentId);
    return childExpenses || [];
  } catch (error) {
    console.error('L·ªói kh√¥ng x√°c ƒë·ªãnh khi t·∫£i chi ti√™u con:', error);
    return [];
  }
}

// T·∫£i d·ªØ li·ªáu b√°o c√°o so s√°nh
async function loadComparisonData() {
  try {
    showLoading();
    
    // Ki·ªÉm tra elements c·∫ßn thi·∫øt
    const chartCanvas = document.getElementById('comparison-chart');
    const tableBody = document.querySelector('#comparison-table tbody');
    
    // Ki·ªÉm tra t·ª´ng ph·∫ßn t·ª≠
    if (!chartCanvas) {
      console.warn('Kh√¥ng t√¨m th·∫•y ph·∫ßn t·ª≠ canvas comparison-chart');
      hideLoading();
      return;
    }
    
    if (!tableBody) {
      console.warn('Kh√¥ng t√¨m th·∫•y ph·∫ßn t·ª≠ #comparison-table tbody');
      hideLoading();
      return;
    }
    
    console.log('ƒê√£ t√¨m th·∫•y t·∫•t c·∫£ c√°c ph·∫ßn t·ª≠ DOM c·∫ßn thi·∫øt cho b√°o c√°o so s√°nh');
    
    // L·∫•y token - kh√¥ng c·∫ßn d√πng tr·ª±c ti·∫øp trong query
    const token = getCookie('sb_token') || localStorage.getItem('token') || sessionStorage.getItem('sb_token');
    
    // Nh√≥m d·ªØ li·ªáu theo lo·∫°i so s√°nh (th√°ng, qu√Ω, nƒÉm)
    const periodRanges = calculateComparisonPeriods(currentComparisonType);
    
    // Ki·ªÉm tra xem Supabase ƒë√£ ƒë∆∞·ª£c kh·ªüi t·∫°o ch∆∞a
    if (!window.supabase) {
      console.error('Supabase client ch∆∞a ƒë∆∞·ª£c kh·ªüi t·∫°o');
      hideLoading();
      showError('Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn c∆° s·ªü d·ªØ li·ªáu');
      return;
    }
    
    console.log('T·∫£i d·ªØ li·ªáu cho', periodRanges.length, 'kho·∫£ng th·ªùi gian so s√°nh');
    
    // M·∫£ng promise ƒë·ªÉ l·∫•y d·ªØ li·ªáu cho t·ª´ng kho·∫£ng th·ªùi gian
    const periodPromises = periodRanges.map(async (period) => {
      // X√¢y d·ª±ng query - kh√¥ng s·ª≠ d·ª•ng .auth(token)
      let query = window.supabase
        .from('child_expenses')
        .select('id, noi_dung, gia_tien, ngay_thang, danh_muc, trang_thai, ma_hoa_don, loai_chi_phi')
        .gte('ngay_thang', period.startDate)
        .lte('ngay_thang', period.endDate);
        
      // Ch·ªâ l·∫•y chi ph√≠ c·ªßa ng∆∞·ªùi d√πng hi·ªán t·∫°i
      if (userData && userData.id) {
        query = query.eq('user_id', userData.id);
      }
      
      // L·ªçc theo tr·∫°ng th√°i thanh to√°n
      if (currentPaymentStatus !== 'all') {
        const isPaid = currentPaymentStatus === 'paid';
        console.log(`L·ªçc theo tr·∫°ng th√°i thanh to√°n: ${currentPaymentStatus}`);
        query = query.eq('trang_thai', isPaid ? 'ƒê√£ thanh to√°n' : 'Ch∆∞a thanh to√°n');
      }
      
      // G·ª≠i query kh√¥ng c·∫ßn .auth(token)
      const { data: expenses, error } = await query;
      
      if (error) {
        console.error('L·ªói l·∫•y d·ªØ li·ªáu cho giai ƒëo·∫°n:', period, error);
        return {
          period: period.label,
          amount: 0,
          startDate: period.startDate,
          endDate: period.endDate
        };
      }
      
      // N·∫øu kh√¥ng c√≥ chi ph√≠
      if (!expenses || expenses.length === 0) {
        return {
          period: period.label,
          amount: 0,
          startDate: period.startDate,
          endDate: period.endDate
        };
      }
      
      // Chu·∫©n h√≥a d·ªØ li·ªáu
      const normalizedExpenses = expenses.map(expense => ({
        id: expense.id,
        ten_chi_phi: expense.noi_dung,
        gia_tien: expense.gia_tien,
        ngay_bat_dau: expense.ngay_thang,
        danh_muc: expense.danh_muc,
        status: expense.trang_thai,
        ma_hoa_don: expense.ma_hoa_don,
        loai_chi_phi: expense.loai_chi_phi
      }));
      
      // T√≠nh t·ªïng chi ph√≠ trong kho·∫£ng th·ªùi gian
      const totalAmount = normalizedExpenses.reduce((sum, exp) => sum + (exp.gia_tien || 0), 0);
      
      return {
        period: period.label,
        amount: totalAmount,
        startDate: period.startDate,
        endDate: period.endDate,
        expenses: normalizedExpenses  // Th√™m chi ti·∫øt chi ph√≠ ƒë·ªÉ ph·ª•c v·ª• t√≠nh to√°n t·ªïng quan
      };
    });
    
    // Th·ª±c hi·ªán t·∫•t c·∫£ c√°c promise
    const comparisonData = await Promise.all(periodPromises);
    
    console.log('D·ªØ li·ªáu so s√°nh ƒë√£ t·∫£i xong:', comparisonData);
    
    // Ki·ªÉm tra n·∫øu kh√¥ng c√≥ d·ªØ li·ªáu
    if (comparisonData.every(item => item.amount === 0)) {
      console.log('Kh√¥ng c√≥ d·ªØ li·ªáu cho b√°o c√°o so s√°nh');
      tableBody.innerHTML = '<tr><td colspan="3" class="text-center">Kh√¥ng c√≥ d·ªØ li·ªáu chi ti√™u trong kho·∫£ng th·ªùi gian n√†y</td></tr>';
      
      // C·∫≠p nh·∫≠t t·ªïng quan v·ªõi gi√° tr·ªã r·ªóng
      const emptySummary = {
        totalExpense: 0,
        highestExpense: 0,
        averageExpense: 0,
        highestCategory: { name: 'Ch∆∞a c√≥ d·ªØ li·ªáu', total: 0 }
      };
      updateSummaryWithAnimation(emptySummary);
      hideLoading();
      return;
    }
    
    // T√≠nh to√°n th√¥ng tin t·ªïng quan t·ª´ t·∫•t c·∫£ d·ªØ li·ªáu
    // Thu th·∫≠p t·∫•t c·∫£ chi ph√≠ t·ª´ c√°c kho·∫£ng th·ªùi gian
    const allExpenses = comparisonData.reduce((all, period) => {
      if (period.expenses && period.expenses.length > 0) {
        return [...all, ...period.expenses];
      }
      return all;
    }, []);
    
    // T√≠nh to√°n t·ªïng quan t·ª´ t·∫•t c·∫£ chi ph√≠
    if (allExpenses.length > 0) {
      const summary = calculateSummary(allExpenses);
      updateSummaryWithAnimation(summary);
    }
    
    // C·∫≠p nh·∫≠t bi·ªÉu ƒë·ªì so s√°nh
    renderComparisonChart(comparisonData);
    
    // C·∫≠p nh·∫≠t b·∫£ng d·ªØ li·ªáu
    renderComparisonTable(comparisonData);
    
    // Kh·ªüi t·∫°o tooltips sau khi c·∫≠p nh·∫≠t t·∫•t c·∫£ d·ªØ li·ªáu
    setTimeout(initializeTooltips, 200);
    
    hideLoading();
  } catch (error) {
    console.error('L·ªói t·∫£i d·ªØ li·ªáu so s√°nh:', error);
    hideLoading();
    showError('Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu so s√°nh. Vui l√≤ng th·ª≠ l·∫°i.');
  }
}

// H√†m t√≠nh t·ªïng chi ph√≠ bao g·ªìm c·∫£ chi ph√≠ con - th√™m l·∫°i h√†m n√†y
function calculateTotalWithChildren(expenses) {
  if (!expenses || !Array.isArray(expenses)) {
    return 0;
  }
  
  // T√°ch ri√™ng chi ph√≠ cha v√† con
  const parentExpenses = expenses.filter(expense => !expense.isChild);
  const childExpenses = expenses.filter(expense => expense.isChild);
  
  // T√≠nh t·ªïng chi ph√≠ cha kh√¥ng c√≥ con
  const parentsWithoutChildren = parentExpenses.filter(parent => 
    !parent.has_children || !childExpenses.some(child => child.parent_id === parent.id)
  );
  const parentsTotal = parentsWithoutChildren.reduce((sum, expense) => sum + (expense.gia_tien || 0), 0);
  
  // T√≠nh t·ªïng chi ph√≠ con
  const childrenTotal = childExpenses.reduce((sum, expense) => sum + (expense.gia_tien || 0), 0);
  
  return parentsTotal + childrenTotal;
}

// T√≠nh to√°n kho·∫£ng th·ªùi gian d·ª±a v√†o lo·∫°i th·ªùi gian
function calculateDateRange(timeRange) {
  const now = new Date();
  let startDate, endDate;
  
  switch (timeRange) {
    case 'today':
      startDate = new Date(now.getFullYear(), now.getMonth(), now.getDate());
      endDate = new Date(now.getFullYear(), now.getMonth(), now.getDate(), 23, 59, 59);
      break;
    case 'yesterday':
      startDate = new Date(now.getFullYear(), now.getMonth(), now.getDate() - 1);
      endDate = new Date(now.getFullYear(), now.getMonth(), now.getDate() - 1, 23, 59, 59);
      break;
    case 'thisWeek':
      startDate = new Date(now.getFullYear(), now.getMonth(), now.getDate() - now.getDay());
      endDate = new Date(now.getFullYear(), now.getMonth(), now.getDate(), 23, 59, 59);
      break;
    case 'thisMonth':
      startDate = new Date(now.getFullYear(), now.getMonth(), 1);
      endDate = new Date(now.getFullYear(), now.getMonth() + 1, 0, 23, 59, 59);
      break;
    case 'lastMonth':
      startDate = new Date(now.getFullYear(), now.getMonth() - 1, 1);
      endDate = new Date(now.getFullYear(), now.getMonth(), 0, 23, 59, 59);
      break;
    case 'thisQuarter':
      const quarter = Math.floor(now.getMonth() / 3);
      startDate = new Date(now.getFullYear(), quarter * 3, 1);
      endDate = new Date(now.getFullYear(), (quarter + 1) * 3, 0, 23, 59, 59);
      break;
    case 'thisYear':
      startDate = new Date(now.getFullYear(), 0, 1);
      endDate = new Date(now.getFullYear(), 11, 31, 23, 59, 59);
      break;
    default:
      startDate = new Date(now.getFullYear(), 0, 1);
      endDate = new Date(now.getFullYear(), 11, 31, 23, 59, 59);
  }
  
  return {
    startDate: startDate.toISOString().split('T')[0],
    endDate: endDate.toISOString().split('T')[0]
  };
}

// T√≠nh to√°n kho·∫£ng th·ªùi gian cho b√°o c√°o so s√°nh
function calculateComparisonPeriods(comparisonType) {
  const now = new Date();
  const periods = [];
  
  if (comparisonType === 'month') {
    // 6 th√°ng g·∫ßn nh·∫•t
    for (let i = 5; i >= 0; i--) {
      const month = new Date(now.getFullYear(), now.getMonth() - i, 1);
      const endOfMonth = new Date(month.getFullYear(), month.getMonth() + 1, 0);
      
      periods.push({
        label: `Th√°ng ${month.getMonth() + 1}/${month.getFullYear()}`,
        startDate: month.toISOString().split('T')[0],
        endDate: endOfMonth.toISOString().split('T')[0]
      });
    }
  } else if (comparisonType === 'quarter') {
    // 4 qu√Ω g·∫ßn nh·∫•t
    const currentQuarter = Math.floor(now.getMonth() / 3);
    
    for (let i = 3; i >= 0; i--) {
      const quarterOffset = (currentQuarter - i + 4) % 4;
      const yearOffset = Math.floor((i - currentQuarter) / 4);
      const year = now.getFullYear() - yearOffset;
      const quarter = quarterOffset + 1;
      
      const startOfQuarter = new Date(year, quarterOffset * 3, 1);
      const endOfQuarter = new Date(year, (quarterOffset + 1) * 3, 0);
      
      periods.push({
        label: `Qu√Ω ${quarter}/${year}`,
        startDate: startOfQuarter.toISOString().split('T')[0],
        endDate: endOfQuarter.toISOString().split('T')[0]
      });
    }
  } else {
    // 3 nƒÉm g·∫ßn nh·∫•t
    for (let i = 2; i >= 0; i--) {
      const year = now.getFullYear() - i;
      const startOfYear = new Date(year, 0, 1);
      const endOfYear = new Date(year, 11, 31);
      
      periods.push({
        label: `${year}`,
        startDate: startOfYear.toISOString().split('T')[0],
        endDate: endOfYear.toISOString().split('T')[0]
      });
    }
  }
  
  return periods;
}

// Ki·ªÉm tra xem container bi·ªÉu ƒë·ªì c√≥ hi·ªÉn th·ªã kh√¥ng
function isChartContainerVisible() {
  const chartContainer = document.querySelector('.reports-chart-wrapper');
  if (!chartContainer) return false;
  
  // Ki·ªÉm tra xem ph·∫ßn t·ª≠ c√≥ b·ªã ·∫©n kh√¥ng
  const style = window.getComputedStyle(chartContainer);
  return style.display !== 'none' && style.visibility !== 'hidden';
}

// Ki·ªÉm tra xem t·∫•t c·∫£ c√°c ph·∫ßn t·ª≠ DOM c·∫ßn thi·∫øt c√≥ t·ªìn t·∫°i kh√¥ng
function checkRequiredElements() {
  // Ki·ªÉm tra ph·∫ßn t·ª≠ ƒë·ªÉ v·∫Ω bi·ªÉu ƒë·ªì
  const timeChartElement = document.getElementById('time-chart');
  if (!timeChartElement) {
    console.warn('Kh√¥ng t√¨m th·∫•y ph·∫ßn t·ª≠ #time-chart');
    return false;
  }
  
  // Ki·ªÉm tra ph·∫ßn t·ª≠ b·∫£ng d·ªØ li·ªáu
  const timeTableElement = document.getElementById('time-table');
  if (!timeTableElement) {
    console.warn('Kh√¥ng t√¨m th·∫•y ph·∫ßn t·ª≠ #time-table');
    return false;
  }
  
  // Ki·ªÉm tra container bi·ªÉu ƒë·ªì
  const chartWrapperElement = document.querySelector('.reports-chart-wrapper');
  if (!chartWrapperElement) {
    console.warn('Kh√¥ng t√¨m th·∫•y ph·∫ßn t·ª≠ .reports-chart-wrapper');
    return false;
  }
  
  // Ki·ªÉm tra container b·∫£ng
  const tableContainerElement = document.querySelector('.reports-table-container');
  if (!tableContainerElement) {
    console.warn('Kh√¥ng t√¨m th·∫•y ph·∫ßn t·ª≠ .reports-table-container');
    return false;
  }
  
  return true;
}

// Thay ƒë·ªïi tr·∫°ng th√°i thanh to√°n
function changePaymentStatus(status) {
  currentPaymentStatus = status;
  console.log(`ƒê√£ thay ƒë·ªïi tr·∫°ng th√°i thanh to√°n: ${status}`);
  
  // T·∫£i l·∫°i d·ªØ li·ªáu b√°o c√°o
  loadReportData();
}

// T·∫£i d·ªØ li·ªáu chi ti·∫øt t·ª´ng chi ph√≠
async function loadDetailReport(startDate, endDate) {
  try {
    // Ki·ªÉm tra elements c·∫ßn thi·∫øt
    const detailTableBody = document.querySelector('#detail-table tbody');
    
    // Ki·ªÉm tra t·ª´ng ph·∫ßn t·ª≠
    if (!detailTableBody) {
      console.warn('Kh√¥ng t√¨m th·∫•y ph·∫ßn t·ª≠ #detail-table tbody');
      hideLoading();
      return;
    }
    
    console.log('ƒê√£ t√¨m th·∫•y ph·∫ßn t·ª≠ DOM c·∫ßn thi·∫øt cho b√°o c√°o chi ti·∫øt');
    
    // Ki·ªÉm tra Supabase ƒë√£ s·∫µn s√†ng ch∆∞a
    if (!window.supabase) {
      console.error('‚ùå Supabase client ch∆∞a ƒë∆∞·ª£c kh·ªüi t·∫°o');
      hideLoading();
      showError('Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn c∆° s·ªü d·ªØ li·ªáu. Vui l√≤ng t·∫£i l·∫°i trang.');
      return;
    }
    
    console.log('Truy v·∫•n d·ªØ li·ªáu chi ti·∫øt chi ph√≠ t·ª´ Supabase...');
    
    // X√¢y d·ª±ng query v√† l·ªçc theo th·ªùi gian
    let query = window.supabase
      .from('child_expenses')
      .select('id, noi_dung, gia_tien, ngay_thang, danh_muc, trang_thai, ma_hoa_don, loai_chi_phi, dia_diem, ghi_chu')
      .order('ngay_thang', { ascending: false });
    
    // √Åp d·ª•ng b·ªô l·ªçc th·ªùi gian
    if (startDate && endDate) {
      console.log(`L·ªçc theo kho·∫£ng th·ªùi gian: ${startDate} ƒë·∫øn ${endDate}`);
      query = query.gte('ngay_thang', startDate).lte('ngay_thang', endDate);
    } else {
      // T√≠nh to√°n kho·∫£ng th·ªùi gian d·ª±a v√†o currentTimeRange
      const { startDate: rangeStart, endDate: rangeEnd } = calculateDateRange(currentTimeRange);
      console.log(`L·ªçc theo kho·∫£ng th·ªùi gian m·∫∑c ƒë·ªãnh: ${rangeStart} ƒë·∫øn ${rangeEnd}`);
      query = query.gte('ngay_thang', rangeStart).lte('ngay_thang', rangeEnd);
    }
    
    // Ch·ªâ l·∫•y chi ph√≠ c·ªßa ng∆∞·ªùi d√πng hi·ªán t·∫°i
    if (userData && userData.id) {
      console.log(`L·ªçc theo ng∆∞·ªùi d√πng ID: ${userData.id}`);
      query = query.eq('user_id', userData.id);
    } else {
      console.warn('Kh√¥ng c√≥ ID ng∆∞·ªùi d√πng ƒë·ªÉ l·ªçc');
    }
    
    // L·ªçc theo tr·∫°ng th√°i thanh to√°n
    if (currentPaymentStatus !== 'all') {
      const isPaid = currentPaymentStatus === 'paid';
      console.log(`L·ªçc theo tr·∫°ng th√°i thanh to√°n: ${currentPaymentStatus}`);
      query = query.eq('trang_thai', isPaid ? 'ƒê√£ thanh to√°n' : 'Ch∆∞a thanh to√°n');
    }
    
    // G·ª≠i query 
    const { data: expenses, error } = await query;
    
    if (error) {
      console.error('L·ªói khi truy v·∫•n d·ªØ li·ªáu chi ti·∫øt:', error);
      throw new Error('Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu chi ti·∫øt chi ph√≠: ' + error.message);
    }
    
    // Ki·ªÉm tra n·∫øu kh√¥ng c√≥ d·ªØ li·ªáu
    if (!expenses || expenses.length === 0) {
      console.log('Kh√¥ng c√≥ d·ªØ li·ªáu chi ti·∫øt trong kho·∫£ng th·ªùi gian ƒë√£ ch·ªçn');
      // Hi·ªÉn th·ªã th√¥ng b√°o kh√¥ng c√≥ d·ªØ li·ªáu
      detailTableBody.innerHTML = '<tr><td colspan="6" class="text-center">Kh√¥ng c√≥ d·ªØ li·ªáu chi ti·∫øt trong kho·∫£ng th·ªùi gian n√†y</td></tr>';
      hideLoading();
      
      // C·∫≠p nh·∫≠t t·ªïng quan v·ªõi gi√° tr·ªã r·ªóng
      const emptySummary = {
        totalExpense: 0,
        highestExpense: 0,
        averageExpense: 0,
        highestCategory: { name: 'Ch∆∞a c√≥ d·ªØ li·ªáu', total: 0 }
      };
      updateSummaryWithAnimation(emptySummary);
      return;
    }
    
    console.log('ƒê√£ t·∫£i ƒë∆∞·ª£c d·ªØ li·ªáu chi ti·∫øt chi ph√≠:', expenses.length, 'b·∫£n ghi');
    
    // Chu·∫©n h√≥a d·ªØ li·ªáu
    const normalizedExpenses = expenses.map(expense => ({
      id: expense.id,
      ten_chi_phi: expense.noi_dung,
      gia_tien: expense.gia_tien,
      ngay_thang: expense.ngay_thang,
      danh_muc: expense.danh_muc,
      status: expense.trang_thai,
      ma_hoa_don: expense.ma_hoa_don,
      loai_chi_phi: expense.loai_chi_phi,
      dia_diem: expense.dia_diem || 'Kh√¥ng c√≥',
      ghi_chu: expense.ghi_chu || ''
    }));
    
    // T√≠nh t·ªïng c√°c s·ªë li·ªáu th·ªëng k√™
    const summary = calculateSummary(normalizedExpenses);
    
    // C·∫≠p nh·∫≠t t·ªïng quan v·ªõi animation
    updateSummaryWithAnimation(summary);
    
    // Render b·∫£ng chi ti·∫øt
    renderDetailTable(normalizedExpenses);
    
    hideLoading();
  } catch (error) {
    console.error('L·ªói t·∫£i d·ªØ li·ªáu chi ti·∫øt chi ph√≠:', error);
    showError('Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu chi ti·∫øt. Vui l√≤ng th·ª≠ l·∫°i.');
    hideLoading();
  }
}

// Render b·∫£ng chi ti·∫øt chi ph√≠
function renderDetailTable(expenses) {
  const tableBody = document.querySelector('#detail-table tbody');
  if (!tableBody) {
    console.warn('Kh√¥ng t√¨m th·∫•y ph·∫ßn t·ª≠ #detail-table tbody');
    return;
  }
  
  // L∆∞u l·∫°i d·ªØ li·ªáu chi ti·∫øt hi·ªán t·∫°i ƒë·ªÉ ph√¢n trang
  currentDetailData = expenses;
  
  // S·∫Øp x·∫øp theo ng√†y m·ªõi nh·∫•t
  expenses.sort((a, b) => new Date(b.ngay_thang) - new Date(a.ngay_thang));
  
  // T√≠nh t·ªïng s·ªë trang
  totalPages = Math.ceil(expenses.length / itemsPerPage);
  
  // ƒê·∫£m b·∫£o trang hi·ªán t·∫°i h·ª£p l·ªá
  if (currentPage > totalPages) {
    currentPage = 1;
  }
  
  // Render d·ªØ li·ªáu cho trang hi·ªán t·∫°i
  renderDetailPage(currentPage);
  
  // Render ph√¢n trang
  renderPagination();
}

// Render m·ªôt trang d·ªØ li·ªáu chi ti·∫øt
function renderDetailPage(page) {
  const tableBody = document.querySelector('#detail-table tbody');
  if (!tableBody) {
    console.warn('Kh√¥ng t√¨m th·∫•y ph·∫ßn t·ª≠ #detail-table tbody');
    return;
  }
  
  // T√≠nh v·ªã tr√≠ b·∫Øt ƒë·∫ßu v√† k·∫øt th√∫c c·ªßa d·ªØ li·ªáu
  const startIndex = (page - 1) * itemsPerPage;
  const endIndex = Math.min(startIndex + itemsPerPage, currentDetailData.length);
  
  // L·∫•y d·ªØ li·ªáu cho trang hi·ªán t·∫°i
  const currentPageData = currentDetailData.slice(startIndex, endIndex);
  
  // X√≥a n·ªôi dung c≈©
  tableBody.innerHTML = '';
  
  // N·∫øu kh√¥ng c√≥ d·ªØ li·ªáu
  if (currentPageData.length === 0) {
    tableBody.innerHTML = '<tr><td colspan="6" class="text-center">Kh√¥ng c√≥ d·ªØ li·ªáu chi ti·∫øt</td></tr>';
    return;
  }
  
  // Render t·ª´ng d√≤ng d·ªØ li·ªáu
  currentPageData.forEach((expense, index) => {
    const row = document.createElement('tr');
    
    // ƒê·ªãnh d·∫°ng ng√†y th√°ng
    const date = new Date(expense.ngay_thang);
    const formattedDate = date.toLocaleDateString('vi-VN', {
      day: '2-digit',
      month: '2-digit',
      year: 'numeric'
    });
    
    row.innerHTML = `
      <td class="text-center">${startIndex + index + 1}</td>
      <td>
        <div class="detail-item-name">
          <span class="item-name">${expense.ten_chi_phi}</span>
          <span class="item-category badge">${expense.danh_muc || 'Kh√°c'}</span>
        </div>
      </td>
      <td class="text-end">${formatCurrency(expense.gia_tien)}</td>
      <td class="text-center">${formattedDate}</td>
      <td>${expense.dia_diem || 'Kh√¥ng c√≥'}</td>
      <td>${expense.ghi_chu || ''}</td>
    `;
    
    // Th√™m class cho tr·∫°ng th√°i thanh to√°n
    if (expense.status) {
      row.classList.add(expense.status === 'ƒê√£ thanh to√°n' ? 'status-paid' : 'status-unpaid');
      
      // Th√™m tooltip cho tr·∫°ng th√°i
      row.setAttribute('data-bs-toggle', 'tooltip');
      row.setAttribute('data-bs-placement', 'left');
      row.setAttribute('title', expense.status);
    }
    
    tableBody.appendChild(row);
  });
  
  // C·∫≠p nh·∫≠t trang hi·ªán t·∫°i
  currentPage = page;
  
  // Kh·ªüi t·∫°o tooltips
  setTimeout(() => {
    initializeTooltips();
  }, 200);
}

// Render ph√¢n trang
function renderPagination() {
  // T√¨m ho·∫∑c t·∫°o container ph√¢n trang
  let paginationContainer = document.querySelector('.reports-pagination');
  if (!paginationContainer) {
    // N·∫øu ch∆∞a c√≥, t·∫°o container m·ªõi
    paginationContainer = document.createElement('div');
    paginationContainer.className = 'reports-pagination';
    
    // Th√™m v√†o sau table container
    const tableContainer = document.querySelector('#detail-report .reports-table-container');
    if (tableContainer) {
      tableContainer.after(paginationContainer);
    }
  }
  
  // N·∫øu ch·ªâ c√≥ 1 trang ho·∫∑c kh√¥ng c√≥ d·ªØ li·ªáu
  if (totalPages <= 1) {
    paginationContainer.style.display = 'none';
    return;
  }
  
  // Hi·ªÉn th·ªã ph√¢n trang
  paginationContainer.style.display = 'flex';
  
  // X√≥a n√∫t ph√¢n trang c≈©
  paginationContainer.innerHTML = '';
  
  // Th√™m n√∫t Previous
  const prevButton = document.createElement('button');
  prevButton.innerHTML = '&laquo; Tr∆∞·ªõc';
  prevButton.disabled = currentPage === 1;
  prevButton.addEventListener('click', () => {
    if (currentPage > 1) {
      renderDetailPage(currentPage - 1);
      renderPagination();
    }
  });
  paginationContainer.appendChild(prevButton);
  
  // Th√™m s·ªë trang
  const maxPageButtons = 5;
  let startPage = Math.max(1, currentPage - Math.floor(maxPageButtons / 2));
  let endPage = Math.min(totalPages, startPage + maxPageButtons - 1);
  
  // ƒêi·ªÅu ch·ªânh startPage ƒë·ªÉ lu√¥n hi·ªÉn th·ªã ƒë·ªß s·ªë n√∫t
  if (endPage - startPage + 1 < maxPageButtons && startPage > 1) {
    startPage = Math.max(1, endPage - maxPageButtons + 1);
  }
  
  for (let i = startPage; i <= endPage; i++) {
    const pageButton = document.createElement('button');
    pageButton.textContent = i;
    pageButton.className = i === currentPage ? 'active' : '';
    pageButton.addEventListener('click', () => {
      renderDetailPage(i);
      renderPagination();
    });
    paginationContainer.appendChild(pageButton);
  }
  
  // Th√™m n√∫t Next
  const nextButton = document.createElement('button');
  nextButton.innerHTML = 'Sau &raquo;';
  nextButton.disabled = currentPage === totalPages;
  nextButton.addEventListener('click', () => {
    if (currentPage < totalPages) {
      renderDetailPage(currentPage + 1);
      renderPagination();
    }
  });
  paginationContainer.appendChild(nextButton);
}

// Render bi·ªÉu ƒë·ªì danh m·ª•c v·ªõi hi·ªáu ·ª©ng
async function renderCategoryChartWithAnimation(categoryData) {
  try {
    console.log("B·∫Øt ƒë·∫ßu renderCategoryChartWithAnimation v·ªõi", categoryData.length, "danh m·ª•c");
    
    // Ki·ªÉm tra d·ªØ li·ªáu
    if (!categoryData || !Array.isArray(categoryData) || categoryData.length === 0) {
      console.warn('Kh√¥ng c√≥ d·ªØ li·ªáu danh m·ª•c ƒë·ªÉ hi·ªÉn th·ªã bi·ªÉu ƒë·ªì');
      return;
    }
    
    // T√¨m ph·∫ßn t·ª≠ container cho bi·ªÉu ƒë·ªì danh m·ª•c
    const chartContainer = document.querySelector('.reports-chart-half');
    if (!chartContainer) {
      console.warn('Kh√¥ng t√¨m th·∫•y .reports-chart-half');
      return;
    }
    
    // X√≥a n·ªôi dung hi·ªán t·∫°i v√† t·∫°o canvas m·ªõi
    chartContainer.innerHTML = '';
    const canvas = document.createElement('canvas');
    canvas.id = 'category-chart';
    canvas.style.width = '100%';
    canvas.style.height = '100%';
    canvas.style.display = 'block';
    chartContainer.appendChild(canvas);
    
    // ƒê·∫£m b·∫£o container c√≥ style ƒë√∫ng
    chartContainer.style.display = 'flex';
    chartContainer.style.position = 'relative';
    chartContainer.style.width = '100%';
    chartContainer.style.height = '300px';
    chartContainer.style.minHeight = '300px';
    
    // Hi·ªÉn th·ªã loading
    chartContainer.classList.add('loading');
    
    try {
      // Ki·ªÉm tra Chart.js ƒë√£ ƒë∆∞·ª£c t·∫£i
      if (typeof Chart === 'undefined') {
        throw new Error('Th∆∞ vi·ªán Chart.js ch∆∞a ƒë∆∞·ª£c t·∫£i');
      }
      
      // L·∫•y context cho canvas
      const ctx = canvas.getContext('2d');
      if (!ctx) {
        throw new Error('Kh√¥ng th·ªÉ l·∫•y context t·ª´ canvas');
      }
      
      // Thi·∫øt l·∫≠p k√≠ch th∆∞·ªõc canvas
      const parentWidth = chartContainer.offsetWidth || 300;
      canvas.width = parentWidth;
      canvas.height = 300;
      console.log(`Canvas danh m·ª•c k√≠ch th∆∞·ªõc: ${canvas.width} x ${canvas.height}`);
      
      // X√≥a bi·ªÉu ƒë·ªì c≈© n·∫øu c√≥
      if (currentCharts.categoryChart) {
        currentCharts.categoryChart.destroy();
        currentCharts.categoryChart = null;
      }
      
      // T·∫°o d·ªØ li·ªáu cho bi·ªÉu ƒë·ªì
      const chartData = categoryData.map(item => ({
        name: item.name,
        value: item.value,
        color: CONFIG.categories[item.name]?.color || CONFIG.colors.info
      }));
      
      // Chu·∫©n b·ªã d·ªØ li·ªáu cho bi·ªÉu ƒë·ªì
      const labels = chartData.map(item => item.name);
      const data = chartData.map(item => item.value);
      const colors = chartData.map(item => item.color + '80'); // Th√™m opacity
      const borderColors = chartData.map(item => item.color);
      
      // C·∫•u h√¨nh bi·ªÉu ƒë·ªì
      const chartConfig = {
        type: 'doughnut',
        data: {
          labels: labels,
          datasets: [{
            data: data,
            backgroundColor: colors,
            borderColor: borderColors,
            borderWidth: 2,
            hoverOffset: 4
          }]
        },
        options: {
          responsive: true,
          maintainAspectRatio: false,
          cutout: '70%',
          layout: {
            padding: 20
          },
          animation: {
            animateRotate: true,
            animateScale: true,
            duration: 1000
          },
          plugins: {
            legend: {
              display: false
            },
            tooltip: {
              backgroundColor: 'rgba(0, 0, 0, 0.8)',
              titleFont: {
                size: 13
              },
              bodyFont: {
                size: 12
              },
              padding: 12,
              callbacks: {
                label: function(context) {
                  const value = context.raw;
                  const total = chartData.reduce((a, b) => a + b.value, 0);
                  const percentage = total > 0 ? ((value / total) * 100).toFixed(1) : '0.0';
                  return `${context.label}: ${formatCurrency(value)} (${percentage}%)`;
                }
              }
            }
          }
        }
      };
      
      // T·∫°o bi·ªÉu ƒë·ªì m·ªõi
      console.log("Kh·ªüi t·∫°o bi·ªÉu ƒë·ªì danh m·ª•c m·ªõi");
      currentCharts.categoryChart = new Chart(ctx, chartConfig);
      
      // L∆∞u bi·ªÉu ƒë·ªì trong window object
      window.categoryChart = currentCharts.categoryChart;
      
      console.log("ƒê√£ t·∫°o bi·ªÉu ƒë·ªì danh m·ª•c th√†nh c√¥ng:", currentCharts.categoryChart?.id);
      
      // C·∫≠p nh·∫≠t legend v·ªõi icons
      renderCategoryLegendWithIcons(chartData);
      
    } catch (error) {
      console.error('L·ªói khi t·∫°o bi·ªÉu ƒë·ªì danh m·ª•c:', error);
      throw error;
    } finally {
      // ·∫®n loading
      chartContainer.classList.remove('loading');
    }
  } catch (error) {
    console.error('L·ªói trong renderCategoryChartWithAnimation:', error);
    throw error;
  }
}

// H√†m l·∫•y d·ªØ li·ªáu b√°o c√°o theo th·ªùi gian
async function getTimeReportData() {
  try {
    console.log('ƒêang l·∫•y d·ªØ li·ªáu b√°o c√°o theo th·ªùi gian...');
    
    // L·∫•y ng√†y b·∫Øt ƒë·∫ßu v√† k·∫øt th√∫c t·ª´ b·ªô l·ªçc
    const { startDate, endDate } = getDateRangeFromFilter();
    
    try {
      // Truy v·∫•n d·ªØ li·ªáu t·ª´ Supabase
      const { data: expenses, error } = await window.supabase
        .from('child_expenses')
        .select('*')
        .gte('ngay_thang', startDate)
        .lte('ngay_thang', endDate)
        .order('ngay_thang', { ascending: false });
      
      if (error) {
        console.error('L·ªói khi l·∫•y d·ªØ li·ªáu b√°o c√°o theo th·ªùi gian:', error);
        // N·∫øu l·ªói, t·∫°o d·ªØ li·ªáu m·∫´u
        return generateSampleTimeData();
      }
      
      // N·∫øu kh√¥ng c√≥ d·ªØ li·ªáu, tr·∫£ v·ªÅ d·ªØ li·ªáu m·∫´u
      if (!expenses || expenses.length === 0) {
        console.log('Kh√¥ng c√≥ d·ªØ li·ªáu chi ph√≠ trong kho·∫£ng th·ªùi gian n√†y, s·ª≠ d·ª•ng d·ªØ li·ªáu m·∫´u');
        return generateSampleTimeData();
      }
      
      // Nh√≥m d·ªØ li·ªáu theo th·ªùi gian
      const groupedData = groupByTime(expenses, currentTimeRange);
      
      // ƒê·ªãnh d·∫°ng d·ªØ li·ªáu cho xu·∫•t b√°o c√°o
      return groupedData.map(item => ({
        period: item.label,
        amount: item.total,
        count: item.count || 0
      }));
    } catch (connectionError) {
      console.error('L·ªói k·∫øt n·ªëi ƒë·∫øn c∆° s·ªü d·ªØ li·ªáu:', connectionError);
      // N·∫øu l·ªói k·∫øt n·ªëi, t·∫°o d·ªØ li·ªáu m·∫´u
      return generateSampleTimeData();
    }
  } catch (error) {
    console.error('L·ªói khi l·∫•y d·ªØ li·ªáu b√°o c√°o theo th·ªùi gian:', error);
    return generateSampleTimeData();
  }
}

// H√†m l·∫•y d·ªØ li·ªáu b√°o c√°o theo danh m·ª•c
async function getCategoryReportData() {
  try {
    console.log('ƒêang l·∫•y d·ªØ li·ªáu b√°o c√°o theo danh m·ª•c...');
    
    // L·∫•y ng√†y b·∫Øt ƒë·∫ßu v√† k·∫øt th√∫c t·ª´ b·ªô l·ªçc
    const { startDate, endDate } = getDateRangeFromFilter();
    
    try {
      // Truy v·∫•n d·ªØ li·ªáu t·ª´ Supabase
      const { data: expenses, error } = await window.supabase
        .from('child_expenses')
        .select('*')
        .gte('ngay_thang', startDate)
        .lte('ngay_thang', endDate);
      
      if (error) {
        console.error('L·ªói khi l·∫•y d·ªØ li·ªáu b√°o c√°o theo danh m·ª•c:', error);
        // N·∫øu l·ªói, t·∫°o d·ªØ li·ªáu m·∫´u
        return generateSampleCategoryData();
      }
      
      // N·∫øu kh√¥ng c√≥ d·ªØ li·ªáu, tr·∫£ v·ªÅ d·ªØ li·ªáu m·∫´u
      if (!expenses || expenses.length === 0) {
        console.log('Kh√¥ng c√≥ d·ªØ li·ªáu chi ph√≠ trong kho·∫£ng th·ªùi gian n√†y, s·ª≠ d·ª•ng d·ªØ li·ªáu m·∫´u');
        return generateSampleCategoryData();
      }
      
      // Chu·∫©n ho√° d·ªØ li·ªáu
      const normalizedExpenses = expenses.map(expense => ({
        id: expense.id,
        ten_chi_phi: expense.noi_dung,
        gia_tien: expense.gia_tien,
        ngay_bat_dau: expense.ngay_thang,
        danh_muc: expense.danh_muc || 'Kh√°c',
        status: expense.trang_thai,
        ma_hoa_don: expense.ma_hoa_don,
        loai_chi_phi: expense.loai_chi_phi
      }));
      
      // Nh√≥m d·ªØ li·ªáu theo danh m·ª•c
      const categoryData = groupByCategory(normalizedExpenses);
      
      // T√≠nh t·ªïng chi ph√≠ ƒë·ªÉ t√≠nh ph·∫ßn trƒÉm
      const totalExpense = categoryData.reduce((sum, item) => sum + item.total, 0);
      
      // ƒê·ªãnh d·∫°ng d·ªØ li·ªáu cho xu·∫•t b√°o c√°o
      return categoryData.map(item => ({
        category: item.category,
        amount: item.total,
        percentage: item.percentage,
        count: item.count || 0
      }));
    } catch (connectionError) {
      console.error('L·ªói k·∫øt n·ªëi ƒë·∫øn c∆° s·ªü d·ªØ li·ªáu:', connectionError);
      // N·∫øu l·ªói k·∫øt n·ªëi, t·∫°o d·ªØ li·ªáu m·∫´u
      return generateSampleCategoryData();
    }
  } catch (error) {
    console.error('L·ªói khi l·∫•y d·ªØ li·ªáu b√°o c√°o theo danh m·ª•c:', error);
    return generateSampleCategoryData();
  }
}

// H√†m l·∫•y d·ªØ li·ªáu b√°o c√°o so s√°nh
async function getComparisonReportData() {
  try {
    console.log('ƒêang l·∫•y d·ªØ li·ªáu b√°o c√°o so s√°nh...');
    
    try {
      // Th·ª≠ k·∫øt n·ªëi ƒë·∫øn c∆° s·ªü d·ªØ li·ªáu
      const { error } = await window.supabase
        .from('child_expenses')
        .select('count', { count: 'exact', head: true });
      
      if (error) {
        console.error('L·ªói k·∫øt n·ªëi ƒë·∫øn c∆° s·ªü d·ªØ li·ªáu:', error);
        // N·∫øu l·ªói, s·ª≠ d·ª•ng d·ªØ li·ªáu m·∫´u
        return generateSampleComparisonData();
      }
      
      // L·∫•y ng√†y hi·ªán t·∫°i
      const now = new Date();
      
      // M·∫£ng l∆∞u d·ªØ li·ªáu k·∫øt qu·∫£
      const result = [];
      
      // D·ª±a v√†o lo·∫°i so s√°nh ƒë·ªÉ l·∫•y d·ªØ li·ªáu t∆∞∆°ng ·ª©ng
      if (currentComparisonType === 'month') {
        // So s√°nh 6 th√°ng g·∫ßn nh·∫•t
        for (let i = 5; i >= 0; i--) {
          const month = new Date(now.getFullYear(), now.getMonth() - i, 1);
          const nextMonth = new Date(now.getFullYear(), now.getMonth() - i + 1, 0);
          
          // ƒê·ªãnh d·∫°ng ng√†y th√°ng ƒë·ªÉ truy v·∫•n
          const startOfMonth = month.toISOString().split('T')[0];
          const endOfMonth = nextMonth.toISOString().split('T')[0];
          
          // Truy v·∫•n d·ªØ li·ªáu theo th√°ng
          const { data: expenses, error } = await window.supabase
            .from('chi_phi')
            .select('gia_tien')
            .gte('ngay_thang', startOfMonth)
            .lte('ngay_thang', endOfMonth);
          
          if (error) {
            console.error('L·ªói khi l·∫•y d·ªØ li·ªáu th√°ng:', error);
            continue;
          }
          
          // T√≠nh t·ªïng chi ph√≠ trong th√°ng
          const totalAmount = expenses?.reduce((sum, exp) => sum + (exp.gia_tien || 0), 0) || Math.floor(Math.random() * 15000000) + 5000000;
          
          // Th√™m d·ªØ li·ªáu v√†o k·∫øt qu·∫£
          result.push({
            period: `Th√°ng ${month.getMonth() + 1}/${month.getFullYear()}`,
            amount: totalAmount,
            count: expenses?.length || Math.floor(Math.random() * 30) + 5
          });
        }
      } else if (currentComparisonType === 'quarter') {
        // Tr·∫£ v·ªÅ d·ªØ li·ªáu m·∫´u v√¨ ch√∫ng ta ƒë√£ bi·∫øt c∆° s·ªü d·ªØ li·ªáu kh√¥ng c√≥ d·ªØ li·ªáu th·ª±c
        return generateSampleComparisonData();
      } else {
        // Tr·∫£ v·ªÅ d·ªØ li·ªáu m·∫´u cho nƒÉm
        return generateSampleComparisonData();
      }
      
      return result.length > 0 ? result : generateSampleComparisonData();
    } catch (connectionError) {
      console.error('L·ªói k·∫øt n·ªëi ƒë·∫øn c∆° s·ªü d·ªØ li·ªáu:', connectionError);
      // N·∫øu l·ªói k·∫øt n·ªëi, t·∫°o d·ªØ li·ªáu m·∫´u
      return generateSampleComparisonData();
    }
  } catch (error) {
    console.error('L·ªói khi l·∫•y d·ªØ li·ªáu b√°o c√°o so s√°nh:', error);
    return generateSampleComparisonData();
  }
}

// T·∫°o d·ªØ li·ªáu m·∫´u cho b√°o c√°o theo th·ªùi gian
function generateSampleTimeData() {
  console.log('T·∫°o d·ªØ li·ªáu m·∫´u cho b√°o c√°o theo th·ªùi gian');
  
  const now = new Date();
  const result = [];
  
  switch (currentTimeRange) {
    case 'month':
      // T·∫°o d·ªØ li·ªáu cho 30 ng√†y g·∫ßn nh·∫•t
      for (let i = 29; i >= 0; i--) {
        const date = new Date(now);
        date.setDate(date.getDate() - i);
        
        result.push({
          period: `${date.getDate()}/${date.getMonth() + 1}`,
          amount: Math.floor(Math.random() * 2000000) + 500000,
          count: Math.floor(Math.random() * 5) + 1
        });
      }
      break;
      
    case 'quarter':
      // T·∫°o d·ªØ li·ªáu cho 3 th√°ng g·∫ßn nh·∫•t
      for (let i = 2; i >= 0; i--) {
        const month = new Date(now.getFullYear(), now.getMonth() - i, 1);
        
        result.push({
          period: `Th√°ng ${month.getMonth() + 1}/${month.getFullYear()}`,
          amount: Math.floor(Math.random() * 20000000) + 5000000,
          count: Math.floor(Math.random() * 30) + 5
        });
      }
      break;
      
    case 'year':
    default:
      // T·∫°o d·ªØ li·ªáu cho 12 th√°ng g·∫ßn nh·∫•t
      for (let i = 11; i >= 0; i--) {
        const month = new Date(now.getFullYear(), now.getMonth() - i, 1);
        
        result.push({
          period: `Th√°ng ${month.getMonth() + 1}/${month.getFullYear()}`,
          amount: Math.floor(Math.random() * 30000000) + 10000000,
          count: Math.floor(Math.random() * 50) + 10
        });
      }
      break;
  }
  
  return result;
}

// T·∫°o d·ªØ li·ªáu m·∫´u cho b√°o c√°o theo danh m·ª•c
function generateSampleCategoryData() {
  console.log('T·∫°o d·ªØ li·ªáu m·∫´u cho b√°o c√°o theo danh m·ª•c');
  
  const categories = [
    { name: 'Th·ª±c ph·∫©m', color: '#4f46e5' },
    { name: 'Nh√† c·ª≠a', color: '#0ea5e9' },
    { name: 'Di chuy·ªÉn', color: '#10b981' },
    { name: 'Gi·∫£i tr√≠', color: '#f97316' },
    { name: 'S·ª©c kh·ªèe', color: '#ef4444' },
    { name: 'Gi√°o d·ª•c', color: '#8b5cf6' },
    { name: 'Kh√°c', color: '#6b7280' }
  ];
  
  const result = [];
  // T·∫°o worksheet t·ª´ m·∫£ng d·ªØ li·ªáu
  const ws = XLSX.utils.aoa_to_sheet(excelData);
  
  // ƒê·ªãnh d·∫°ng cho worksheet
  const range = XLSX.utils.decode_range(ws['!ref']);
  
  // ƒê·ªãnh d·∫°ng chi·ªÅu r·ªông c·ªôt
  const cols = [];
  for (let i = 0; i <= range.e.c; i++) {
    cols.push({ wch: 20 });  // ƒê·ªô r·ªông chu·∫©n cho t·∫•t c·∫£ c·ªôt
  }
  ws['!cols'] = cols;
  
  return ws;
}

// T·∫°o HTML cho b√°o c√°o theo th·ªùi gian
function generateTimeReportHTML(data) {
  let html = `
    <div style="margin-top: 20px;">
      <h2 style="color: #4f46e5; border-bottom: 2px solid #e2e8f0; padding-bottom: 10px;">
        Chi ph√≠ theo th·ªùi gian
      </h2>
      
      <table style="width: 100%; border-collapse: collapse; margin-top: 20px;">
        <thead>
          <tr style="background-color: #f1f5f9;">
            <th style="padding: 10px; text-align: left; border-bottom: 2px solid #e2e8f0;">Th·ªùi gian</th>
            <th style="padding: 10px; text-align: right; border-bottom: 2px solid #e2e8f0;">Chi ph√≠</th>
            <th style="padding: 10px; text-align: right; border-bottom: 2px solid #e2e8f0;">S·ªë l∆∞·ª£ng giao d·ªãch</th>
          </tr>
        </thead>
        <tbody>
  `;
  
  // Th√™m d·ªØ li·ªáu t·ª´ng d√≤ng
  let totalAmount = 0;
  let totalCount = 0;
  
  data.details.forEach(item => {
    totalAmount += item.amount;
    totalCount += item.count;
    
    html += `
      <tr style="border-bottom: 1px solid #e2e8f0;">
        <td style="padding: 10px;">${item.period}</td>
        <td style="padding: 10px; text-align: right;">${formatCurrency(item.amount)}</td>
        <td style="padding: 10px; text-align: right;">${item.count}</td>
      </tr>
    `;
  });
  
  // Th√™m h√†ng t·ªïng c·ªông
  html += `
        <tr style="font-weight: bold; background-color: #f8fafc;">
          <td style="padding: 10px;">T·ªïng c·ªông</td>
          <td style="padding: 10px; text-align: right;">${formatCurrency(totalAmount)}</td>
          <td style="padding: 10px; text-align: right;">${totalCount}</td>
        </tr>
      </tbody>
    </table>
  </div>
  `;
  
  return html;
}

// T·∫°o HTML cho b√°o c√°o theo danh m·ª•c
function generateCategoryReportHTML(data) {
  let html = `
    <div style="margin-top: 20px;">
      <h2 style="color: #4f46e5; border-bottom: 2px solid #e2e8f0; padding-bottom: 10px;">
        Chi ph√≠ theo danh m·ª•c
      </h2>
      
      <table style="width: 100%; border-collapse: collapse; margin-top: 20px;">
        <thead>
          <tr style="background-color: #f1f5f9;">
            <th style="padding: 10px; text-align: left; border-bottom: 2px solid #e2e8f0;">Danh m·ª•c</th>
            <th style="padding: 10px; text-align: right; border-bottom: 2px solid #e2e8f0;">Chi ph√≠</th>
            <th style="padding: 10px; text-align: right; border-bottom: 2px solid #e2e8f0;">T·ª∑ l·ªá (%)</th>
            <th style="padding: 10px; text-align: right; border-bottom: 2px solid #e2e8f0;">S·ªë l∆∞·ª£ng giao d·ªãch</th>
          </tr>
        </thead>
        <tbody>
  `;
  
  // Th√™m d·ªØ li·ªáu t·ª´ng d√≤ng
  let totalAmount = 0;
  let totalCount = 0;
  
  data.details.forEach(item => {
    totalAmount += item.amount;
    totalCount += item.count;
    
    html += `
      <tr style="border-bottom: 1px solid #e2e8f0;">
        <td style="padding: 10px;">${item.category}</td>
        <td style="padding: 10px; text-align: right;">${formatCurrency(item.amount)}</td>
        <td style="padding: 10px; text-align: right;">${item.percentage}%</td>
        <td style="padding: 10px; text-align: right;">${item.count}</td>
      </tr>
    `;
  });
  
  // Th√™m h√†ng t·ªïng c·ªông
  html += `
        <tr style="font-weight: bold; background-color: #f8fafc;">
          <td style="padding: 10px;">T·ªïng c·ªông</td>
          <td style="padding: 10px; text-align: right;">${formatCurrency(totalAmount)}</td>
          <td style="padding: 10px; text-align: right;">100%</td>
          <td style="padding: 10px; text-align: right;">${totalCount}</td>
        </tr>
      </tbody>
    </table>
  </div>
  `;
  
  return html;
}

// T·∫°o HTML cho b√°o c√°o so s√°nh
function generateComparisonReportHTML(data) {
  let html = `
    <div style="margin-top: 20px;">
      <h2 style="color: #4f46e5; border-bottom: 2px solid #e2e8f0; padding-bottom: 10px;">
        So s√°nh chi ph√≠
      </h2>
      
      <table style="width: 100%; border-collapse: collapse; margin-top: 20px;">
        <thead>
          <tr style="background-color: #f1f5f9;">
            <th style="padding: 10px; text-align: left; border-bottom: 2px solid #e2e8f0;">Th·ªùi k·ª≥</th>
            <th style="padding: 10px; text-align: right; border-bottom: 2px solid #e2e8f0;">Chi ph√≠</th>
            <th style="padding: 10px; text-align: right; border-bottom: 2px solid #e2e8f0;">S·ªë l∆∞·ª£ng giao d·ªãch</th>
          </tr>
        </thead>
        <tbody>
  `;
  
  // Th√™m d·ªØ li·ªáu t·ª´ng d√≤ng
  let totalAmount = 0;
  let totalCount = 0;
  
  data.details.forEach(item => {
    totalAmount += item.amount;
    totalCount += item.count;
    
    html += `
      <tr style="border-bottom: 1px solid #e2e8f0;">
        <td style="padding: 10px;">${item.period}</td>
        <td style="padding: 10px; text-align: right;">${formatCurrency(item.amount)}</td>
        <td style="padding: 10px; text-align: right;">${item.count}</td>
      </tr>
    `;
  });
  
  // Th√™m h√†ng t·ªïng c·ªông
  html += `
        <tr style="font-weight: bold; background-color: #f8fafc;">
          <td style="padding: 10px;">T·ªïng c·ªông</td>
          <td style="padding: 10px; text-align: right;">${formatCurrency(totalAmount)}</td>
          <td style="padding: 10px; text-align: right;">${totalCount}</td>
        </tr>
      </tbody>
    </table>
  </div>
  `;
  
  return html;
}

// T·∫°o template PDF d·ª±a tr√™n lo·∫°i b√°o c√°o
async function generatePDFTemplate(data, reportType) {
  console.log('T·∫°o template PDF cho b√°o c√°o:', reportType);
  
  // T·∫°o container ch·ª©a n·ªôi dung b√°o c√°o
  const container = document.createElement('div');
  container.style.padding = '20px';
  container.style.fontFamily = 'Arial, sans-serif';
  container.style.maxWidth = '800px';
  container.style.margin = '0 auto';
  
  // Header b√°o c√°o
  const header = document.createElement('div');
  header.style.textAlign = 'center';
  header.style.marginBottom = '20px';
  
  // Ti√™u ƒë·ªÅ v√† th√¥ng tin
  const title = document.createElement('h1');
  title.textContent = data.title;
  title.style.color = '#4f46e5';
  title.style.marginBottom = '10px';
  
  const dateInfo = document.createElement('p');
  dateInfo.innerHTML = `T·ª´: <strong>${data.dateRange.start}</strong> ƒë·∫øn <strong>${data.dateRange.end}</strong>`;
  dateInfo.style.color = '#64748b';
  
  const generatedInfo = document.createElement('p');
  generatedInfo.innerHTML = `T·∫°o l√∫c: <strong>${data.generatedAt}</strong>`;
  generatedInfo.style.color = '#64748b';
  generatedInfo.style.fontSize = '0.9em';
  
  // Th√™m c√°c ph·∫ßn t·ª≠ v√†o header
  header.appendChild(title);
  header.appendChild(dateInfo);
  header.appendChild(generatedInfo);
  
  // Th√™m header v√†o container
  container.appendChild(header);
  
  // T·∫°o ph·∫ßn n·ªôi dung d·ª±a tr√™n lo·∫°i b√°o c√°o
  let content = '';
  
  switch (reportType) {
    case 'time':
      content = generateTimeReportHTML(data);
      break;
    case 'category':
      content = generateCategoryReportHTML(data);
      break;
    case 'comparison':
      content = generateComparisonReportHTML(data);
      break;
    case 'detail':
      content = generateDetailReportHTML(data);
      break;
    default:
      content = `<p>Kh√¥ng c√≥ d·ªØ li·ªáu cho lo·∫°i b√°o c√°o: ${reportType}</p>`;
  }
  
  // Th√™m n·ªôi dung v√†o container
  container.innerHTML += content;
  
  // Footer
  const footer = document.createElement('div');
  footer.style.marginTop = '30px';
  footer.style.borderTop = '1px solid #e2e8f0';
  footer.style.paddingTop = '10px';
  footer.style.textAlign = 'center';
  footer.style.color = '#94a3b8';
  footer.style.fontSize = '0.8em';
  footer.textContent = '¬© ' + new Date().getFullYear() + ' - ·ª®ng d·ª•ng Qu·∫£n l√Ω Chi ph√≠';
  
  // Th√™m footer v√†o container
  container.appendChild(footer);
  
  return container;
}

// T·∫°o n·ªôi dung HTML cho b√°o c√°o chi ti·∫øt chi ph√≠
function generateDetailReportHTML(data) {
  console.log('T·∫°o HTML cho b√°o c√°o chi ti·∫øt chi ph√≠ v·ªõi', data.details.length, 'chi ph√≠');
  
  if (!data.details || data.details.length === 0) {
    return `<p style="text-align: center; color: #64748b; padding: 20px;">Kh√¥ng c√≥ d·ªØ li·ªáu chi ti·∫øt chi ph√≠.</p>`;
  }
  
  // T√≠nh t·ªïng chi ph√≠
  const totalAmount = data.details.reduce((sum, expense) => sum + (expense.gia_tien || 0), 0);
  
  // CSS cho b·∫£ng
  const tableStyle = `
    width: 100%;
    border-collapse: collapse;
    margin-top: 20px;
    font-size: 14px;
    box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);
  `;
  
  const thStyle = `
    background-color: #4f46e5;
    color: white;
    padding: 12px;
    text-align: left;
    font-weight: 600;
  `;
  
  const tdStyle = `
    padding: 10px;
    color: #000;
    border-bottom: 1px solid #e2e8f0;
  `;
  
  // T·∫°o HTML cho b·∫£ng chi ti·∫øt
  let html = `
  <div style="overflow-x: auto;">
    <table style="${tableStyle}">
      <thead>
        <tr>
          <th style="${thStyle}">STT</th>
          <th style="${thStyle}">T√™n Chi Ph√≠</th>
          <th style="${thStyle}">S·ªë Ti·ªÅn</th>
          <th style="${thStyle}">Ng√†y Th√°ng</th>
          <th style="${thStyle}">ƒê·ªãa ƒêi·ªÉm</th>
          <th style="${thStyle}">Ghi Ch√∫</th>
        </tr>
      </thead>
      <tbody>
  `;
  
  // Th√™m h√†ng cho t·ª´ng chi ph√≠
  data.details.forEach((expense, index) => {
    const rowStyle = index % 2 === 0 ? 'background-color: #f8fafc;' : '';
    
    html += `
      <tr style="${rowStyle}">
        <td style="${tdStyle}">${index + 1}</td>
        <td style="${tdStyle}">${expense.ten_chi_phi || expense.noi_dung || 'Kh√¥ng t√™n'}</td>
        <td style="${tdStyle} text-align: right;">${formatCurrency(expense.gia_tien || 0)}</td>
        <td style="${tdStyle}">${formatDate(new Date(expense.ngay_thang || expense.ngay_bat_dau))}</td>
        <td style="${tdStyle}">${expense.dia_diem || '-'}</td>
        <td style="${tdStyle}">${expense.ghi_chu || '-'}</td>
      </tr>
    `;
  });
  
  // Th√™m h√†ng t·ªïng c·ªông
  html += `
      <tr style="font-weight: bold; background-color: #f1f5f9;">
        <td style="${tdStyle}" colspan="2">T·ªïng c·ªông</td>
        <td style="${tdStyle} text-align: right;">${formatCurrency(totalAmount)}</td>
        <td style="${tdStyle}" colspan="3"></td>
      </tr>
    </tbody>
  </table>
  </div>
  
  <div style="margin-top: 20px; font-size: 13px; color: #64748b;">
    <p>T·ªïng s·ªë chi ph√≠: ${data.details.length}</p>
    <p>T·ªïng chi ti√™u: ${formatCurrency(totalAmount)}</p>
  </div>
  `;
  
  return html;
}

// H√†m t·∫£i th∆∞ vi·ªán html2pdf n·∫øu ch∆∞a t·ªìn t·∫°i
async function loadHTML2PDF() {
  return new Promise((resolve, reject) => {
    // Ki·ªÉm tra xem script ƒë√£ ƒë∆∞·ª£c th√™m ch∆∞a
    if (document.querySelector('script[src*="html2pdf"]')) {
      // N·∫øu script ƒë√£ t·ªìn t·∫°i nh∆∞ng th∆∞ vi·ªán ch∆∞a ƒë∆∞·ª£c t·∫£i ho√†n to√†n, ƒë·ª£i th√™m
      const checkInterval = setInterval(() => {
        if (typeof html2pdf !== 'undefined') {
          clearInterval(checkInterval);
          resolve();
        }
      }, 100);
      
      // ƒê·∫∑t timeout ƒë·ªÉ tr√°nh ƒë·ª£i v√¥ h·∫°n
      setTimeout(() => {
        clearInterval(checkInterval);
        if (typeof html2pdf === 'undefined') {
          reject(new Error('Th∆∞ vi·ªán html2pdf kh√¥ng ƒë∆∞·ª£c t·∫£i sau khi ch·ªù ƒë·ª£i'));
        }
      }, 5000);
      
      return;
    }
    
    // N·∫øu script ch∆∞a t·ªìn t·∫°i, th√™m m·ªõi
    const script = document.createElement('script');
    script.src = 'https://cdnjs.cloudflare.com/ajax/libs/html2pdf.js/0.10.1/html2pdf.bundle.min.js';
    script.async = true;
    
    script.onload = function() {
      console.log('ƒê√£ t·∫£i html2pdf.js th√†nh c√¥ng');
      
      // Ki·ªÉm tra xem th∆∞ vi·ªán ƒë√£ ƒë∆∞·ª£c ƒë·ªãnh nghƒ©a ch∆∞a
      const checkInterval = setInterval(() => {
        if (typeof html2pdf !== 'undefined') {
          clearInterval(checkInterval);
          resolve();
        }
      }, 100);
      
      // ƒê·∫∑t timeout ƒë·ªÉ tr√°nh ƒë·ª£i v√¥ h·∫°n
      setTimeout(() => {
        clearInterval(checkInterval);
        if (typeof html2pdf === 'undefined') {
          reject(new Error('Th∆∞ vi·ªán html2pdf kh√¥ng ƒë∆∞·ª£c t·∫£i sau khi ch·ªù ƒë·ª£i'));
        }
      }, 5000);
    };
    
    script.onerror = function() {
      reject(new Error('Kh√¥ng th·ªÉ t·∫£i html2pdf.js'));
    };
    
    document.head.appendChild(script);
  });
}

// Th√™m event listener cho c√°c n√∫t chuy·ªÉn ƒë·ªïi th√°ng/qu√Ω/nƒÉm
function initComparisonButtons() {
  const comparisonButtons = document.querySelectorAll('.reports-comparison-btn');
  
  if (comparisonButtons && comparisonButtons.length > 0) {
    comparisonButtons.forEach(button => {
      button.addEventListener('click', function() {
        // X√≥a class active kh·ªèi t·∫•t c·∫£ c√°c n√∫t
        comparisonButtons.forEach(btn => btn.classList.remove('active'));
        
        // Th√™m class active cho n√∫t ƒë∆∞·ª£c nh·∫•p
        this.classList.add('active');
        
        // L·∫•y gi√° tr·ªã lo·∫°i d·ªØ li·ªáu (th√°ng, qu√Ω, nƒÉm)
        const type = this.getAttribute('data-type');
        
        // C·∫≠p nh·∫≠t bi·ªÉu ƒë·ªì so s√°nh
        updateComparisonChart(type);
      });
    });
  } else {
    console.warn('Kh√¥ng t√¨m th·∫•y n√∫t chuy·ªÉn ƒë·ªïi so s√°nh');
  }
}

// H√†m c·∫≠p nh·∫≠t bi·ªÉu ƒë·ªì so s√°nh
function updateComparisonChart(type) {
  console.log(`C·∫≠p nh·∫≠t bi·ªÉu ƒë·ªì so s√°nh: ${type}`);
  // L·∫•y d·ªØ li·ªáu t·ª´ b·ªô nh·ªõ cache ho·∫∑c t√≠nh to√°n l·∫°i
  let data = [];
  
  switch(type) {
    case 'month':
      data = generateMonthlyComparisonData();
      break;
    case 'quarter':
      data = generateQuarterlyComparisonData();
      break;
    case 'year':
      data = generateYearlyComparisonData();
      break;
    default:
      data = generateMonthlyComparisonData();
  }
  
  // C·∫≠p nh·∫≠t b·∫£ng v√† bi·ªÉu ƒë·ªì
  renderComparisonTable(data);
  renderComparisonChart(data);
}

// T·∫°o d·ªØ li·ªáu so s√°nh theo th√°ng
function generateMonthlyComparisonData() {
  // S·ª≠ d·ª•ng d·ªØ li·ªáu chi ph√≠ t·ª´ b·ªô nh·ªõ cache ho·∫∑c fetch l·∫°i
  const expenses = filteredExpenses || [];
  
  // Ki·ªÉm tra d·ªØ li·ªáu
  if (!expenses || expenses.length === 0) {
    console.warn('Kh√¥ng c√≥ d·ªØ li·ªáu chi ph√≠ ƒë·ªÉ t·∫°o bi·ªÉu ƒë·ªì so s√°nh theo th√°ng');
    return [];
  }
  
  // Nh√≥m chi ph√≠ theo th√°ng
  const monthlyData = {};
  
  expenses.forEach(expense => {
    // S·ª≠ d·ª•ng tr∆∞·ªùng ngay_thang thay v√¨ date
    const date = new Date(expense.ngay_thang);
    const month = date.getMonth();
    const year = date.getFullYear();
    const key = `${year}-${month + 1}`;
    
    if (!monthlyData[key]) {
      monthlyData[key] = {
        period: `${month + 1}/${year}`,
        amount: 0
      };
    }
    
    // S·ª≠ d·ª•ng tr∆∞·ªùng gia_tien thay v√¨ amount
    monthlyData[key].amount += expense.gia_tien || 0;
  });
  
  // Chuy·ªÉn ƒë·ªïi d·ªØ li·ªáu th√†nh m·∫£ng v√† s·∫Øp x·∫øp theo th·ªùi gian
  return Object.values(monthlyData).sort((a, b) => {
    const [monthA, yearA] = a.period.split('/');
    const [monthB, yearB] = b.period.split('/');
    
    if (yearA !== yearB) {
      return yearA - yearB;
    }
    
    return monthA - monthB;
  });
}

// T·∫°o d·ªØ li·ªáu so s√°nh theo qu√Ω
function generateQuarterlyComparisonData() {
  // S·ª≠ d·ª•ng d·ªØ li·ªáu chi ph√≠ t·ª´ b·ªô nh·ªõ cache ho·∫∑c fetch l·∫°i
  const expenses = filteredExpenses || [];
  
  // Ki·ªÉm tra d·ªØ li·ªáu
  if (!expenses || expenses.length === 0) {
    console.warn('Kh√¥ng c√≥ d·ªØ li·ªáu chi ph√≠ ƒë·ªÉ t·∫°o bi·ªÉu ƒë·ªì so s√°nh theo qu√Ω');
    return [];
  }
  
  // Nh√≥m chi ph√≠ theo qu√Ω
  const quarterlyData = {};
  
  expenses.forEach(expense => {
    // S·ª≠ d·ª•ng tr∆∞·ªùng ngay_thang thay v√¨ date
    const date = new Date(expense.ngay_thang);
    const month = date.getMonth();
    const year = date.getFullYear();
    const quarter = Math.floor(month / 3) + 1;
    const key = `${year}-Q${quarter}`;
    
    if (!quarterlyData[key]) {
      quarterlyData[key] = {
        period: `Q${quarter}/${year}`,
        amount: 0
      };
    }
    
    // S·ª≠ d·ª•ng tr∆∞·ªùng gia_tien thay v√¨ amount
    quarterlyData[key].amount += expense.gia_tien || 0;
  });
  
  // Chuy·ªÉn ƒë·ªïi d·ªØ li·ªáu th√†nh m·∫£ng v√† s·∫Øp x·∫øp theo th·ªùi gian
  return Object.values(quarterlyData).sort((a, b) => {
    const [quarterA, yearA] = a.period.split('/');
    const [quarterB, yearB] = b.period.split('/');
    
    if (yearA !== yearB) {
      return yearA - yearB;
    }
    
    return quarterA.replace('Q', '') - quarterB.replace('Q', '');
  });
}

// T·∫°o d·ªØ li·ªáu so s√°nh theo nƒÉm
function generateYearlyComparisonData() {
  // S·ª≠ d·ª•ng d·ªØ li·ªáu chi ph√≠ t·ª´ b·ªô nh·ªõ cache ho·∫∑c fetch l·∫°i
  const expenses = filteredExpenses || [];
  
  // Ki·ªÉm tra d·ªØ li·ªáu
  if (!expenses || expenses.length === 0) {
    console.warn('Kh√¥ng c√≥ d·ªØ li·ªáu chi ph√≠ ƒë·ªÉ t·∫°o bi·ªÉu ƒë·ªì so s√°nh theo nƒÉm');
    return [];
  }
  
  // Nh√≥m chi ph√≠ theo nƒÉm
  const yearlyData = {};
  
  expenses.forEach(expense => {
    // S·ª≠ d·ª•ng tr∆∞·ªùng ngay_thang thay v√¨ date
    const date = new Date(expense.ngay_thang);
    const year = date.getFullYear();
    const key = `${year}`;
    
    if (!yearlyData[key]) {
      yearlyData[key] = {
        period: `${year}`,
        amount: 0
      };
    }
    
    // S·ª≠ d·ª•ng tr∆∞·ªùng gia_tien thay v√¨ amount
    yearlyData[key].amount += expense.gia_tien || 0;
  });
  
  // Chuy·ªÉn ƒë·ªïi d·ªØ li·ªáu th√†nh m·∫£ng v√† s·∫Øp x·∫øp theo th·ªùi gian
  return Object.values(yearlyData).sort((a, b) => a.period - b.period);
}

// G·ªçi h√†m initialize khi t·∫£i trang
document.addEventListener('DOMContentLoaded', function() {
  // ... existing code ...
  initComparisonButtons();
  // ... existing code ...
});

// Initialization function to set up all event listeners and initial data
async function initReportsPage() {
  try {
    await fetchUserData();
    
    if (!userData) {
      console.error('Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu ng∆∞·ªùi d√πng');
      showNotification('Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu. Vui l√≤ng th·ª≠ l·∫°i sau.', 'error');
      return;
    }
    
    // Kh·ªüi t·∫°o c√°c dropdown v√† s·ª± ki·ªán
    initializeFilters();
    
    // Kh·ªüi t·∫°o c√°c n√∫t chuy·ªÉn ƒë·ªïi so s√°nh (th√°ng/qu√Ω/nƒÉm)
    initComparisonButtons();
    
    // T·∫£i d·ªØ li·ªáu chi ph√≠
    await loadExpenseData();
  } catch (error) {
    console.error('L·ªói kh·ªüi t·∫°o trang b√°o c√°o:', error);
    showNotification('ƒê√£ x·∫£y ra l·ªói khi t·∫£i trang. Vui l√≤ng th·ª≠ l·∫°i sau.', 'error');
  }
}
